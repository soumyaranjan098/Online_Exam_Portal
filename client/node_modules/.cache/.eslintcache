[{"E:\\project\\Mern-Quiz-App\\client\\src\\index.js":"1","E:\\project\\Mern-Quiz-App\\client\\src\\App.js":"2","E:\\project\\Mern-Quiz-App\\client\\src\\reportWebVitals.js":"3","E:\\project\\Mern-Quiz-App\\client\\src\\Screens\\LoadingScreen.jsx":"4","E:\\project\\Mern-Quiz-App\\client\\src\\Screens\\Login.jsx":"5","E:\\project\\Mern-Quiz-App\\client\\src\\Actions\\userAction.js":"6","E:\\project\\Mern-Quiz-App\\client\\src\\store.js":"7","E:\\project\\Mern-Quiz-App\\client\\src\\Reducers\\userReducer.js":"8","E:\\project\\Mern-Quiz-App\\client\\src\\Screens\\HomeScreen.jsx":"9","E:\\project\\Mern-Quiz-App\\client\\src\\Components\\DisplayText.jsx":"10","E:\\project\\Mern-Quiz-App\\client\\src\\Components\\Error.jsx":"11","E:\\project\\Mern-Quiz-App\\client\\src\\Components\\Loader.jsx":"12","E:\\project\\Mern-Quiz-App\\client\\src\\Components\\Success.jsx":"13","E:\\project\\Mern-Quiz-App\\client\\src\\Components\\Admin\\Register.jsx":"14","E:\\project\\Mern-Quiz-App\\client\\src\\Components\\Admin\\AllStudents.jsx":"15","E:\\project\\Mern-Quiz-App\\client\\src\\Components\\Admin\\CreateQuestion.jsx":"16","E:\\project\\Mern-Quiz-App\\client\\src\\Components\\Admin\\CreateExam.jsx":"17","E:\\project\\Mern-Quiz-App\\client\\src\\Screens\\AdminScreen.jsx":"18","E:\\project\\Mern-Quiz-App\\client\\src\\Components\\NavBar.jsx":"19","E:\\project\\Mern-Quiz-App\\client\\src\\PrivateRoutes.js":"20","E:\\project\\Mern-Quiz-App\\client\\src\\Reducers\\examReducer.js":"21","E:\\project\\Mern-Quiz-App\\client\\src\\Components\\Admin\\AllExam.jsx":"22","E:\\project\\Mern-Quiz-App\\client\\src\\Actions\\examAction.js":"23","E:\\project\\Mern-Quiz-App\\client\\src\\Components\\Admin\\ExamPage.jsx":"24","E:\\project\\Mern-Quiz-App\\client\\src\\Components\\User\\UserHome.jsx":"25","E:\\project\\Mern-Quiz-App\\client\\src\\Components\\User\\ExaminationPage.jsx":"26","E:\\project\\Mern-Quiz-App\\client\\src\\Components\\Admin\\QuestionsPage.jsx":"27","E:\\project\\Mern-Quiz-App\\client\\src\\Components\\Admin\\ResultsPage.jsx":"28","E:\\project\\Mern-Quiz-App\\client\\src\\Components\\Admin\\ResultData.jsx":"29"},{"size":646,"mtime":1684821525336,"results":"30","hashOfConfig":"31"},{"size":2358,"mtime":1687774001880,"results":"32","hashOfConfig":"31"},{"size":362,"mtime":1684681423668,"results":"33","hashOfConfig":"31"},{"size":578,"mtime":1686208479553,"results":"34","hashOfConfig":"31"},{"size":2941,"mtime":1688369480629,"results":"35","hashOfConfig":"31"},{"size":4591,"mtime":1688369140981,"results":"36","hashOfConfig":"31"},{"size":1654,"mtime":1688369330499,"results":"37","hashOfConfig":"31"},{"size":4837,"mtime":1687518900696,"results":"38","hashOfConfig":"31"},{"size":999,"mtime":1688380296114,"results":"39","hashOfConfig":"31"},{"size":651,"mtime":1684820894747,"results":"40","hashOfConfig":"31"},{"size":510,"mtime":1684926798176,"results":"41","hashOfConfig":"31"},{"size":179,"mtime":1684926861125,"results":"42","hashOfConfig":"31"},{"size":724,"mtime":1686145078308,"results":"43","hashOfConfig":"31"},{"size":4061,"mtime":1687774201137,"results":"44","hashOfConfig":"31"},{"size":1505,"mtime":1685265826973,"results":"45","hashOfConfig":"31"},{"size":6030,"mtime":1687776541261,"results":"46","hashOfConfig":"31"},{"size":4751,"mtime":1687777588815,"results":"47","hashOfConfig":"31"},{"size":1947,"mtime":1687773946523,"results":"48","hashOfConfig":"31"},{"size":2606,"mtime":1688369272804,"results":"49","hashOfConfig":"31"},{"size":751,"mtime":1688379612924,"results":"50","hashOfConfig":"31"},{"size":3130,"mtime":1687759214065,"results":"51","hashOfConfig":"31"},{"size":1447,"mtime":1688369759964,"results":"52","hashOfConfig":"31"},{"size":2490,"mtime":1687848363810,"results":"53","hashOfConfig":"31"},{"size":1629,"mtime":1688275526509,"results":"54","hashOfConfig":"31"},{"size":7103,"mtime":1688380516662,"results":"55","hashOfConfig":"31"},{"size":7088,"mtime":1688381525886,"results":"56","hashOfConfig":"31"},{"size":2070,"mtime":1687773510254,"results":"57","hashOfConfig":"31"},{"size":2762,"mtime":1687773351462,"results":"58","hashOfConfig":"31"},{"size":3007,"mtime":1688277016920,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},"11hww4o",{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},"E:\\project\\Mern-Quiz-App\\client\\src\\index.js",[],[],[],"E:\\project\\Mern-Quiz-App\\client\\src\\App.js",["155"],[],"import { useEffect } from 'react';\nimport {BrowserRouter,Route,Routes} from 'react-router-dom'\nimport './App.css';\nimport Login from './Screens/Login';\nimport Register from './Components/Admin/Register';\nimport LoadingScreen from './Screens/LoadingScreen';\nimport {useDispatch,useSelector} from 'react-redux'\nimport AllStudents from './Components/Admin/AllStudents';\nimport CreateQuestionForm from './Components/Admin/CreateQuestion';\nimport CreateExam from './Components/Admin/CreateExam';\nimport AdminScreen from './Screens/AdminScreen';\nimport NavBar from './Components/NavBar';\nimport PrivateRoutes from './PrivateRoutes';\nimport ExamPage from './Components/Admin/ExamPage';\nimport AllExam from './Components/Admin/AllExam';\nimport HomeScreen from './Screens/HomeScreen';\nimport ExaminationPage from './Components/User/ExaminationPage';\n\nfunction App() {\n  \n  const dispatch = useDispatch();\n  const isLoading = useSelector(state => state.loadingReducer);\n  useEffect(() => {\n    // Simulate a loading delay\n    const timeout = setTimeout(() => {\n      dispatch({ type: 'SET_LOADING', payload: false });\n    }, 1000);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [dispatch]);\n\n  return (\n    <>\n      <LoadingScreen/>\n      {!isLoading && \n        <BrowserRouter>\n        <NavBar/>\n        <Routes>\n        {/* <ProtectedRoute exact path='/data' component={<AllStudents/>}/> */}\n          <Route exact path='/admin'  element={<PrivateRoutes/>}>\n            <Route exact path='dashboard' element={<AdminScreen/>}/>\n            <Route exact path='userlist'  element={<AllStudents/>}/>\n            <Route exact path='createExam' element= {<CreateExam/>} />\n            <Route exact path='allExam' element= {<AllExam/>} />\n            <Route exact path='createQuestions' element={<CreateQuestionForm/>}  />\n            <Route exact path='dashboard/exampage/:exam_id' element={<ExamPage/>} />  \n          </Route>\n          <Route exact path='/' element={<HomeScreen/>} />\n          <Route exact path='/home' element={<HomeScreen/>} />\n          <Route exact path='/login' element={<Login/>}/>\n          {/* <Route exact path='/register' element={<Register/>}/> */}\n           <Route exact path='/examination/:exam_id' element={<ExaminationPage/>}/> \n        </Routes>\n      </BrowserRouter>\n      }\n      \n    </>\n  );\n}\n\nexport default App;\n","E:\\project\\Mern-Quiz-App\\client\\src\\reportWebVitals.js",[],[],"E:\\project\\Mern-Quiz-App\\client\\src\\Screens\\LoadingScreen.jsx",[],[],"E:\\project\\Mern-Quiz-App\\client\\src\\Screens\\Login.jsx",[],[],"E:\\project\\Mern-Quiz-App\\client\\src\\Actions\\userAction.js",[],[],"E:\\project\\Mern-Quiz-App\\client\\src\\store.js",[],[],"E:\\project\\Mern-Quiz-App\\client\\src\\Reducers\\userReducer.js",[],[],"E:\\project\\Mern-Quiz-App\\client\\src\\Screens\\HomeScreen.jsx",[],[],"E:\\project\\Mern-Quiz-App\\client\\src\\Components\\DisplayText.jsx",[],[],"E:\\project\\Mern-Quiz-App\\client\\src\\Components\\Error.jsx",[],[],"E:\\project\\Mern-Quiz-App\\client\\src\\Components\\Loader.jsx",[],[],"E:\\project\\Mern-Quiz-App\\client\\src\\Components\\Success.jsx",[],[],"E:\\project\\Mern-Quiz-App\\client\\src\\Components\\Admin\\Register.jsx",[],[],"E:\\project\\Mern-Quiz-App\\client\\src\\Components\\Admin\\AllStudents.jsx",[],[],"E:\\project\\Mern-Quiz-App\\client\\src\\Components\\Admin\\CreateQuestion.jsx",["156"],[],"import React, { useEffect, useState } from 'react';\r\nimport { Button,Form } from 'react-bootstrap';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\nconst CreateQuestionForm = ({examName}) => {\r\n    const navigate = useNavigate();\r\n    // console.log(examName);\r\n    const [questions , setQuestions] = useState([\r\n        {\r\n            title: \"\",\r\n            options:[\"\",\"\",\"\",\"\"],\r\n            answer:0\r\n        }\r\n    ]);\r\n    const [exam_id ,setExamId] = useState(\"\");\r\n  \r\n    const handleQuestionChange = (index,field,value) =>{\r\n        const updatedQuestion = [...questions];\r\n        updatedQuestion[index][field] = value\r\n        setQuestions(updatedQuestion);\r\n    }\r\n\r\n    const handleOptionChange = (index,optionIndex,value) => {\r\n        const updatedQuestion = [...questions];\r\n        updatedQuestion[index].options[optionIndex] = value;\r\n        setQuestions(updatedQuestion)\r\n    }\r\n\r\n    const handleDeleteQuestion = (index) =>{\r\n        const updatedQuestion = [...questions];\r\n        updatedQuestion.splice(index,1);\r\n        setQuestions(updatedQuestion);\r\n    }\r\n\r\n    const handleAddQuestions = () => {\r\n        const newQuestion = {\r\n            title : \"\",\r\n            options: [\"\",\"\",\"\",\"\"],\r\n            answer: 0\r\n        }\r\n\r\n        setQuestions([...questions,newQuestion]);\r\n    }\r\n\r\n    const examData = async() =>{\r\n        const exam_name = examName;\r\n        try{\r\n            const res = await fetch('/api/exam/getExamByName',{\r\n                method:\"POST\",\r\n                headers:{\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify({\r\n                    exam_name\r\n                })\r\n            });\r\n            const data = await res.json();\r\n            console.log(data);\r\n            setExamId(data._id)\r\n        }catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n    useEffect(()=>{\r\n        examData()\r\n    },[])\r\n\r\n    const formSubmit = async(e) =>{\r\n        e.preventDefault();\r\n        try{\r\n            const resp = await fetch('/api/question/addNewQuestion',{\r\n                method:\"POST\",\r\n                headers:{\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body:JSON.stringify({exam_id,questions})\r\n            });\r\n            \r\n            if(resp.status===201){\r\n                window.alert(\"successfully created..\");\r\n                setTimeout(()=>{\r\n                    navigate('/admin/dashboard')\r\n                },10000)\r\n            }else{\r\n                window.alert(\"error occured..\")\r\n            }\r\n        }catch(err){\r\n            console.log(err)\r\n        }\r\n        \r\n    }\r\n\r\n    // console.log(exam_id)\r\n\r\n  return (\r\n    <>\r\n        <div>\r\n        <h1>{examName}</h1>\r\n            {questions.map((question,index)=>(\r\n                <div key={index}>\r\n                <Form className=\"registerform\">\r\n                <Form.Group className=\"mb-3\" controlId=\"formBasicName\">\r\n              <Form.Label><h5>Question {index+1}</h5> </Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Question Title\"\r\n                value={question.title}\r\n                onChange={(e)=> handleQuestionChange(index,'title',e.target.value)}\r\n              />\r\n              </Form.Group>\r\n                {/* <h2>Question {index+1}</h2>\r\n               <input \r\n                    value={question.title}\r\n                    type='text'\r\n                    placeholder='Question Title'\r\n                    onChange={(e)=> handleQuestionChange(index,'title',e.target.value)}\r\n               /> */}\r\n               {/* <h4>Options:</h4> */}\r\n              {/* {question.options.map((option,optionIndex)=>(\r\n                <div key={optionIndex}> */}\r\n                <Form.Group className=\"mb-3\" controlId=\"formBasicName\">\r\n              <Form.Label><h5>Options:</h5> </Form.Label>\r\n              {question.options.map((option,optionIndex)=>(\r\n                <div key={optionIndex}>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder={`Option ${optionIndex+1}`}\r\n                value={option} \r\n                    onChange={(e)=>handleOptionChange(index,optionIndex,e.target.value) } \r\n              />\r\n              </div>))}\r\n              </Form.Group>\r\n                {/* <input \r\n                    type='text'\r\n                    value={option} \r\n                    onChange={(e)=>handleOptionChange(index,optionIndex,e.target.value) } \r\n                    placeholder= {`Option ${optionIndex+1}`}\r\n                />\r\n                </div>\r\n                ))} */}\r\n                <Form.Group className=\"mb-3\">\r\n        <Form.Label><h5>Answer:</h5></Form.Label>\r\n        <Form.Select\r\n        value={question.answer}\r\n                onChange={(e)=>handleQuestionChange(index,'answer',parseInt(e.target.value))}\r\n                >\r\n        \r\n        {question.options.map((_,optionIndex)=>(\r\n                    <option key={optionIndex} value={optionIndex} >\r\n                        Option {optionIndex+1}\r\n                    </option>\r\n                ))}\r\n        </Form.Select>\r\n      </Form.Group><br/>\r\n            {/* <h5>Answer:</h5>\r\n            <select\r\n                value={question.answer}\r\n                onChange={(e)=>handleQuestionChange(index,'answer',parseInt(e.target.value))}>\r\n                {question.options.map((_,optionIndex)=>(\r\n                    <option key={optionIndex} value={optionIndex} >\r\n                        Option {optionIndex+1}\r\n                    </option>\r\n                ))}\r\n            </select><br/> */}\r\n            <Button  variant='danger' bg='danger' onClick={()=>handleDeleteQuestion(index)}>DELETE</Button>\r\n            </Form>\r\n            </div>\r\n            ))}\r\n            <Button onClick={handleAddQuestions}>ADD</Button>\r\n            <Button onClick={formSubmit}>Submit</Button>\r\n        </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateQuestionForm;\r\n","E:\\project\\Mern-Quiz-App\\client\\src\\Components\\Admin\\CreateExam.jsx",[],[],"E:\\project\\Mern-Quiz-App\\client\\src\\Screens\\AdminScreen.jsx",[],[],"E:\\project\\Mern-Quiz-App\\client\\src\\Components\\NavBar.jsx",[],[],"E:\\project\\Mern-Quiz-App\\client\\src\\PrivateRoutes.js",[],[],"E:\\project\\Mern-Quiz-App\\client\\src\\Reducers\\examReducer.js",[],[],"E:\\project\\Mern-Quiz-App\\client\\src\\Components\\Admin\\AllExam.jsx",[],[],"E:\\project\\Mern-Quiz-App\\client\\src\\Actions\\examAction.js",[],[],"E:\\project\\Mern-Quiz-App\\client\\src\\Components\\Admin\\ExamPage.jsx",[],[],"E:\\project\\Mern-Quiz-App\\client\\src\\Components\\User\\UserHome.jsx",["157","158"],[],"import React, { useEffect, useState } from 'react';\r\nimport { Button, Table,Modal, Row } from 'react-bootstrap';\r\nimport { getAllExams } from '../../Actions/examAction';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Loader from '../Loader';\r\nimport Error from '../Error';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { getResultByUserIds } from '../../Actions/examAction';\r\nimport { getAllQuestions } from '../../Actions/examAction';\r\n\r\n\r\nfunction UserHome() {\r\n  const dispatch = useDispatch();\r\n  const examState = useSelector((state) => state.getExamReducer);\r\n  const { loading, error, Allexam } = examState;\r\n  const navigate = useNavigate();\r\n\r\n  const [results, setResults] = useState({});\r\n  const [answers,setAnswers] = useState({});\r\n\r\n  const UserData = useSelector((state) => state.getResultByUserIdsReducer);\r\n  const {Results} = UserData;\r\n  const QuestionsData = useSelector((state) => state.getAllQuestionsReducer);\r\n  const { Questions } = QuestionsData;\r\n\r\n  const [show, setShow] = useState(false);\r\n  const [selectedExamId, setSelectedExamId] = useState(null);\r\n\r\n\r\n  const handleReviewClick = (examId) => {\r\n    setSelectedExamId(examId);\r\n    setShow(true);\r\n  };\r\n  \r\nconst handleReviewClose = () => {\r\n  setShow(false);\r\n};\r\n\r\nuseEffect(()=>{\r\n  if(selectedExamId !== null){\r\n    dispatch(getAllQuestions({\"exam_id\":selectedExamId}));\r\n  }\r\n},[selectedExamId,dispatch])\r\n\r\n  // console.log(Results);\r\n  // const fetchResult = async (exam_id) => {\r\n  //   const res = await fetch('/api/result/getResultByUserId', {\r\n  //     method: 'POST',\r\n  //     headers: {\r\n  //       'Content-Type': 'application/json',\r\n  //     },\r\n  //     body: JSON.stringify({ exam_id }),\r\n  //   }).then((data) => { return data.json()});\r\n\r\n  //   // console.log(res[0].percentage)\r\n  //   return res[0]?.percentage ?? null;\r\n  // };\r\n\r\n  /////////////////////////// Fetching All exam details //////////////////\r\n\r\n  useEffect(() => {\r\n    dispatch(getAllExams());\r\n  }, [dispatch]);\r\n\r\n  // useEffect(() => {\r\n  //   if (Allexam) {\r\n  //     Allexam.forEach((exam) => {\r\n  //       fetchResult(exam._id)\r\n  //         .then((result) => {\r\n  //           setResults((prevState) => ({\r\n  //             ...prevState,\r\n  //             [exam._id]: result,\r\n  //           }));\r\n  //         })\r\n  //         .catch((error) => {\r\n  //           console.error('Error fetching result:', error);\r\n  //           setResults((prevState) => ({\r\n  //             ...prevState,\r\n  //             [exam._id]: null, // Set null for the exam ID if there is an error\r\n  //           }));\r\n  //         });\r\n  //     });\r\n  //   }\r\n  // }, [Allexam]);\r\n\r\n  ////////////////////////////   Fetching Students Result/////////////////////\r\n  useEffect(()=>{\r\n    if(Allexam){\r\n      const user_ids = Allexam.map((exam)=> exam._id);\r\n      dispatch(getResultByUserIds(user_ids))\r\n    }\r\n  },[Allexam,dispatch])\r\n  \r\n  ///////////////////////         Getting the results Array     ////////////////////\r\n  useEffect(()=>{\r\n    if(Allexam && Results){\r\n      const examResult={};\r\n      const answerData = {};\r\n      Allexam.forEach((exam)=>{\r\n        const result = Results.find((result)=> {\r\n          if(result === null){\r\n            return null;\r\n          }else{\r\n            return result.exam_id === exam._id;\r\n          }\r\n         \r\n        })\r\n        examResult[exam._id] = result ? result.percentage : null;\r\n        answerData[exam._id] = result ? result.answers : null;\r\n      });\r\n      //  console.log(examResult)\r\n      // console.log(answerData)\r\n      setResults(examResult);\r\n      setAnswers(answerData);\r\n    }\r\n  },[Allexam,Results])\r\n//  console.log(results)\r\n\r\n\r\n  return (\r\n\r\n\r\n    <>\r\n      \r\n        {loading && <Loader />}\r\n        {error && <Error error=\"Error While Fetching Users\" />}\r\n        <div style={{ padding: '6rem', backgroundColor:\"white\" }}>\r\n        <Table>\r\n          <thead>\r\n            <tr>\r\n              <th>Exam Name</th>\r\n              <th>Teacher Name</th>\r\n              <th>Exam Date</th>\r\n              <th>Start Exam</th>\r\n              <th>Result</th>\r\n              <th>Review Answers</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {Allexam &&\r\n              Allexam.map((exam) => (\r\n                <tr key={exam._id}>\r\n                  <td>{exam.exam_name}</td>\r\n                  <td>{exam.teacher_name}</td>\r\n                  <td>{exam.exam_date}</td>\r\n                  <td>\r\n                    {results[exam._id] === null ? <Button onClick={() => navigate(`/examination/${exam._id}`)}>Start</Button> : \"Completed\"}\r\n                  </td>\r\n                  <td>{results[exam._id] === null ? 'Not Available' : results[exam._id]}</td>\r\n                  <td>{results[exam._id] === null ? 'Not Available' : <Button onClick={()=>handleReviewClick(exam._id)}>Review</Button>}</td>\r\n                </tr>\r\n              ))}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n      {/* {showReviewModal && <ReviewResult exam_id={{\"exam_id\":selectedExamId}} answers={answers} handleClose={handleReviewClose} />} */}\r\n      {show && \r\n        <Modal\r\n        size=\"lg\"\r\n         show={show}\r\n         onHide={handleReviewClose}\r\n        aria-labelledby=\"example-modal-sizes-title-lg\"\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>\r\n          Correct Answer is displayed in <span style={{color:\"green\"}}>Green colour</span> and worng answer given by Student is displayed in <span style={{color:\"red\"}}>Red colour</span> \r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          {Questions &&\r\n           Questions[0].questions.map((question,index)=>(\r\n            <div key={index} style={{boxShadow:\"2px 2px 5px gray\",marginBottom:\"1rem\",padding:\"1rem\"}}>\r\n              <Row>\r\n                <h4 style={{color:\"blue\",textShadow:\"2px 3px 2px lightgray\",fontFamily:\"sans-serif \"}}>{index+1} : {question.title}</h4>\r\n                {question.options.map((option,optionIndex)=>{\r\n                  const isCorrect = question.answer === optionIndex;\r\n                  const isAnswered = answers[selectedExamId] !== undefined ? answers[selectedExamId][index] === optionIndex : null;\r\n                  return(\r\n                    <div>\r\n                      <h5 style={{color : isCorrect ? \"green\" : isAnswered ? \"red\" : \"inherit\"}}>{option}</h5>\r\n                    </div>\r\n                  )\r\n                })}\r\n                 {answers[selectedExamId] !== undefined && answers[selectedExamId][0] === null || answers[selectedExamId][index] ===null ? (\r\n          <h6 style={{color:\"red\"}}>Not answered</h6>\r\n        ) : null} \r\n        {/* {answers[selectedExamId] !== undefined ? console.log(answers[selectedExamId]) : null} */}\r\n              </Row>\r\n            </div>\r\n           ))\r\n           }\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleReviewClose}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UserHome;\r\n","E:\\project\\Mern-Quiz-App\\client\\src\\Components\\User\\ExaminationPage.jsx",["159"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector,useDispatch } from 'react-redux'; \r\nimport { getAllQuestions, getExamById } from '../../Actions/examAction';\r\nimport { useParams,useNavigate } from 'react-router-dom';\r\nimport Loader from '../Loader';\r\nimport \"./../../Css/ExaminationPage.css\"\r\n\r\n\r\nconst ExaminationPage = () => {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const AllQuestions = useSelector((state)=>state.getAllQuestionsReducer);\r\n  const {Questions} = AllQuestions;\r\n  const getExam = useSelector((state)=> state.getExamByIdReducer)\r\n  const {Allexam} = getExam;\r\n  // console.log(Allexam)\r\n  const [isExamCompleted, setIsExamCompleted] = useState(false);\r\n  const[isOn,setIsOn] = useState(false);\r\n  const[questions,setQuestions] = useState([]);\r\n  const[answer,setAnswer] = useState([]);\r\n  const[currentIndex,setCurrentIndex] = useState(0);\r\n  const[examTime,setExamTime] = useState(null)\r\n  const examId = useParams();\r\n  const [completed,setCompleted] = useState(false);\r\n  const [remainingTime, setRemainingTime] = useState(null);\r\n  //  console.log(examId);\r\n\r\n  const submitExam = async() => {\r\n    let currentTime = new Date();\r\n    console.log(currentTime);\r\n    console.log(answer)\r\n    const per = calculateCorrectPercentage();\r\n    console.log(per)\r\n    await fetch('/api/result/setResult',{\r\n      method:\"POST\",\r\n      headers:{\r\n        \"Content-Type\" : \"application/json\"\r\n      },\r\n      body: JSON.stringify({exam_id:examId.exam_id,answers:answer,percentage: per})\r\n    });\r\n    setIsExamCompleted(true);\r\n  }\r\n\r\n  useEffect(()=>{\r\n    if(completed){\r\n      submitExam();\r\n    }\r\n  },[completed])\r\n// console.log(answer)\r\nuseEffect(() => {\r\n  let timer;\r\n  if (examTime !== null) {\r\n    // console.log(examTime)\r\n    const time = examTime;\r\n    if (!isOn) {\r\n      let currentTime = new Date();\r\n      console.log(currentTime);\r\n      timer = setTimeout(()=>{\r\n        setCompleted(true)\r\n      }, examTime*60000); // Submit exam after specified time\r\n    } else {\r\n      timer = setInterval(() => {\r\n        setCurrentIndex((prevIndex) => {\r\n          if (prevIndex === questions.length - 1) {\r\n            clearInterval(timer);\r\n            // submitExam() // Call submitExam when all questions are answered\r\n            setCompleted(true);\r\n          } else {\r\n            let currentTime = new Date();\r\n            console.log(currentTime);\r\n            return (prevIndex + 1) % questions.length;\r\n          }\r\n        });\r\n      }, time*60000); // Switch to next question every specified time\r\n    }\r\n    // Update remaining time every second\r\n    const endTime = new Date().getTime() + examTime * 60000;\r\n    timer = setInterval(() => {\r\n      const remaining = Math.max(0, Math.floor((endTime - new Date().getTime()) / 1000));\r\n      setRemainingTime(remaining);\r\n    }, 1000);\r\n    \r\n  }\r\n  \r\n\r\n  return () => {\r\n    clearTimeout(timer);\r\n    clearInterval(timer);\r\n  };\r\n}, [isOn, questions, examTime,currentIndex]);\r\n\r\n\r\n  \r\n\r\n  useEffect(()=>{\r\n    dispatch(getAllQuestions(examId))\r\n    dispatch(getExamById(examId))\r\n  },[dispatch,examId])\r\n\r\n  useEffect(()=>{\r\n    if(Allexam && Questions){\r\n      setIsOn(Allexam.exam_type)\r\n      setQuestions(Questions[0].questions);\r\n      setAnswer(new Array(Questions[0]?.questions.length).fill(null));\r\n      setExamTime(Allexam.exam_time)\r\n    }\r\n  },[Allexam,Questions]);\r\n\r\n  //  console.log(questions)\r\n  //  console.log(isOn)\r\n\r\n  //  const handleOptionSelect = (index,optionIndex) => {\r\n  //   const updatedAnswer  = [...answer];\r\n  //   updatedAnswer[index] = optionIndex;\r\n  //   setAnswer(updatedAnswer);\r\n  //  }\r\n   const handleOptionSelect = (index, optionIndex) => {\r\n    // console.log(index,optionIndex);\r\n    setAnswer((prevAnswer) => {\r\n        console.log(prevAnswer)\r\n      const updatedAnswer = [...prevAnswer];\r\n      updatedAnswer[index] = optionIndex;\r\n        // console.log(updatedAnswer)\r\n      return updatedAnswer;\r\n    });\r\n  };\r\n\r\n\r\n\r\n   const calculateCorrectPercentage = () => {\r\n    const totalQuestions = questions.length;\r\n    const correctAnswers = answer.filter(\r\n      (answer, index) => answer === questions[index].answer\r\n    ).length;\r\n    // console.log(correctAnswers);\r\n    const percentage = (correctAnswers / totalQuestions) * 100;\r\n    return percentage.toFixed(2);\r\n  };\r\n\r\n   const handleGoBack = () => {\r\n    navigate('/home')\r\n  };\r\n\r\n   // Helper function to format time\r\n   const formatTime = (time) => {\r\n    const hours = Math.floor(time / 3600);\r\n    const minutes = Math.floor((time % 3600) / 60);\r\n    const seconds = time % 60;\r\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(\r\n      2,\r\n      '0'\r\n    )}`;\r\n  };\r\n\r\n  return (\r\n   <>\r\n    <div className='examdiv'>\r\n    { \r\n    Questions == null ? <Loader/> :\r\n    isExamCompleted ? (\r\n        <div>\r\n          <h3>Exam is completed</h3>\r\n          <h4>Result : {calculateCorrectPercentage()}%</h4>\r\n          <button onClick={handleGoBack}>Go back to homepage</button>\r\n        </div>\r\n      ) \r\n      :\r\n    !isOn ? (\r\n      <div className='allquestiondiv'>\r\n      {/* Display remaining time in allquestiondiv */}\r\n      {remainingTime !== null && <div style={{textAlign:\"end\",marginBottom:\"1rem\"}} >Remaining Time: {formatTime(remainingTime)} seconds</div>}\r\n         {questions && questions.map((quesion,index)=>(\r\n          <div className='allq'>\r\n          <h3>{index+1}) {quesion?.title}</h3>\r\n          {quesion?.options.map((option,optionIndex)=>(\r\n            <div style={{marginLeft:\"2rem\"}}>\r\n            <label key={optionIndex} className='leb'>\r\n              <input\r\n                type='radio'\r\n                name={`option-${index}`}\r\n                value={optionIndex}\r\n                checked={answer[index] === optionIndex}\r\n                onChange={() => handleOptionSelect(index,optionIndex)}\r\n              />\r\n              {option}\r\n            </label><br/>\r\n            </div>\r\n          ))}\r\n          </div>\r\n          \r\n        ))}\r\n        {/* <input type='submit' onClick={submitExam}/> */}\r\n        </div>\r\n    ) : (\r\n      <div className='singlequestiondiv'>\r\n      {remainingTime !== null && <div style={{textAlign:\"end\",marginBottom:\"1rem\"}}>Remaining Time: {remainingTime} seconds</div>}\r\n          <h3>{currentIndex+1}) {questions[currentIndex]?.title}</h3>\r\n          {questions[currentIndex]?.options.map((option, optionIndex) => (\r\n            <div style={{marginLeft:\"2rem\"}}>\r\n            <label className='lev' key={optionIndex}>\r\n              <input\r\n                type=\"radio\"\r\n                name={`question-${currentIndex}`}\r\n                value={optionIndex}\r\n                checked={answer[currentIndex] === optionIndex}\r\n                onChange={() => handleOptionSelect(currentIndex,optionIndex)}\r\n              />\r\n              {option}\r\n            </label><br/>\r\n            </div>\r\n          ))}\r\n        </div>\r\n    )\r\n   }\r\n    </div>   \r\n   </>\r\n  );\r\n};\r\n\r\nexport default ExaminationPage;\r\n","E:\\project\\Mern-Quiz-App\\client\\src\\Components\\Admin\\QuestionsPage.jsx",["160","161"],[],"import React, { useEffect, useState } from 'react'\r\nimport { useSelector,useDispatch } from 'react-redux'; \r\nimport { getAllQuestions } from '../../Actions/examAction';\r\nimport Loader from '../Loader';\r\nimport Error from '../Error';\r\nimport { Table } from 'react-bootstrap';\r\n\r\nfunction QuestionsPage(exam_id) {\r\n    const dispatch = useDispatch();\r\n    const questiondata = useSelector((state)=>state.getAllQuestionsReducer);\r\n    const {Questions,loading,error} = questiondata;\r\n\r\n    // console.log(Questions[0])\r\n    // console.log(exam_id)\r\n     useEffect(()=>{\r\n         dispatch(getAllQuestions(exam_id))\r\n     },[])\r\n  return (\r\n    <>\r\n        <div style={{paddingLeft:\"6rem\",paddingRight:\"6rem\",paddingTop:\"2rem\"}}>\r\n            {loading && <Loader/> }\r\n            {error && <Error/>}\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>No of quesion</th>\r\n                        <th>Questions</th>\r\n                        <th>edit/delete</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                {Questions && Questions[0].questions.map((question,index)=>(\r\n                    <tr key={index}>\r\n                        <td>{index+1}</td>\r\n                        <td>\r\n                            <div>\r\n                                <h4 style={{color:\"blue\",textShadow:\"2px 3px 2px lightgray\",fontFamily:\"sans-serif \"}}>{question.title}</h4>\r\n                                {question.options.map((option,optionIndex)=>(\r\n                                    <h6 key={optionIndex}>{optionIndex+1}) {option}</h6>\r\n                                ))}\r\n                                <h6 style={{color:\"green\",textShadow:\"2px 3px 2px lightgray\"}}>correct answer {question.answer+1}</h6>\r\n                            </div>\r\n                        </td>\r\n                        <td>edit</td>\r\n                    </tr>\r\n            )\r\n            )}\r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default QuestionsPage","E:\\project\\Mern-Quiz-App\\client\\src\\Components\\Admin\\ResultsPage.jsx",["162"],[],"import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'; \r\nimport { getResultByExamId } from '../../Actions/examAction';\r\nimport { getAllUser } from '../../Actions/userAction';\r\nimport Loader from '../Loader';\r\nimport Error from '../Error';\r\nimport { Table } from 'react-bootstrap';\r\nimport ResultData from './ResultData';\r\n\r\nfunction Results(exam_id) {\r\n  const dispatch = useDispatch();\r\n  const resultdata = useSelector((state) => state.getResultByExamIdReducer);\r\n  const { Result } = resultdata;\r\n  // const userData = useSelector((state) => state.getUsersByIdReducer);\r\n  // const { students, loading, error } = userData;\r\n  const userData = useSelector((state) => state.getAllUserReducer);\r\n  const { users, loading, error } = userData;\r\n  const [sortedStudents, setSortedStudents] = useState([]);\r\n  // console.log(Result)\r\n  useEffect(() => {\r\n    dispatch(getResultByExamId(exam_id));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (Result != null) {\r\n      // const user_ids = Result.map((result) => result.user_id);\r\n      // dispatch(getUsersById(user_ids));\r\n      dispatch(getAllUser());\r\n    }\r\n  }, [Result,dispatch]);\r\n\r\n  // useEffect(() => {\r\n  //   if (students.length > 0) {\r\n  //     const sorted = [...students].sort((a, b) => a.registration_no - b.registration_no);\r\n  //     setSortedStudents(sorted);\r\n  //   }\r\n  // }, [students]);\r\n  useEffect(() => {\r\n    if (users.length > 0) {\r\n      const sorted = [...users].sort((a, b) => a.registration_no - b.registration_no);\r\n      setSortedStudents(sorted);\r\n    }\r\n  }, [users]);\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        {loading && <Loader />}\r\n        {error && <Error />}\r\n\r\n        <div style={{paddingLeft:\"6rem\",paddingRight:\"6rem\",paddingTop:\"2rem\"}}>\r\n          <Table>\r\n            <thead>\r\n              <tr>\r\n                <th>Name Of Student</th>\r\n                <th>Registration No</th>\r\n                <th>Mark</th>\r\n                <th>Review Answers</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {Result && sortedStudents.map((student) => {\r\n                const res = Result.find((result) => result.user_id === student._id);\r\n         \r\n                const percentage = res !== undefined ? res.percentage !== undefined ? res.percentage : null : null; \r\n               \r\n                const answers = res !== undefined ? res.answers !== undefined ? res.answers : null : null; \r\n\r\n                return (\r\n                  <ResultData student={student} answers={answers} exam_id={exam_id} percentage={percentage} />\r\n                );\r\n              })}\r\n            </tbody>\r\n          </Table>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Results;\r\n","E:\\project\\Mern-Quiz-App\\client\\src\\Components\\Admin\\ResultData.jsx",["163","164","165","166"],[],"import React, { useEffect, useState } from 'react';\r\nimport { Button, Modal, Row } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getAllQuestions } from '../../Actions/examAction';\r\nimport Loader from '../Loader';\r\nimport Error from '../Error';\r\n\r\nfunction ResultData({ student, percentage, exam_id, answers }) {\r\n  console.log(exam_id)\r\n  const dispatch = useDispatch();\r\n  const QuestionsData = useSelector((state) => state.getAllQuestionsReducer);\r\n  const { Questions, loading, error } = QuestionsData;\r\n\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  useEffect(() => {\r\n    dispatch(getAllQuestions(exam_id));\r\n  }, [exam_id, dispatch]);\r\n\r\n  return (\r\n    <>\r\n      <tr style={{fontSize:\"1.1rem\"}}>\r\n        <td>{student.name}</td>\r\n        <td>{student.registration_no}</td>\r\n        <td>{percentage !== null ? percentage : 'Not Available' }</td>\r\n        <td>\r\n          {answers !== null ? <Button onClick={handleShow}>Review</Button> : \"Not Available\"}\r\n        </td>\r\n      </tr>\r\n\r\n      <Modal size=\"lg\" show={show} onHide={handleClose} >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Correct Answer is displayed in <span style={{color:\"green\"}}>Green colour</span> and worng answer given by Student is displayed in <span style={{color:\"red\"}}>Red colour</span>  </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n        {/* {loading && <Loader/>}\r\n        {error && <Error/>} */}\r\n          {Questions &&\r\n            Questions[0].questions.map((question, index) => (\r\n              <div key={index}  style={{overflowWrap:\"break-word\"}}>\r\n                <Row>\r\n                  <h4 style={{color:\"blue\",textShadow:\"2px 3px 2px lightgray\",fontFamily:\"sans-serif \"}}>({index + 1}): {question.title}</h4>\r\n                  {question.options.map((option, optionIndex) => {\r\n                    const isCorrect = question.answer === optionIndex;\r\n                    const isAnswered = answers !== null ? answers[index] === optionIndex : null;\r\n\r\n                    return (\r\n                      <div key={optionIndex}>\r\n                        <h5 style={{ color: isCorrect ? 'green' : isAnswered ? 'red' : 'inherit' }}>\r\n                          {option}\r\n                        </h5>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                  {/* {console.log(answers !== null ? answers[index]===null? \"ys\": \"no\" : null)} */}\r\n                  {answers !== null && answers[index] ===null ? (\r\n                  <h6 style={{color:\"red\"}}>Not answered</h6>\r\n                ) : null } \r\n                </Row>\r\n              </div>\r\n            ))}\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ResultData;\r\n",{"ruleId":"167","severity":1,"message":"168","line":5,"column":8,"nodeType":"169","messageId":"170","endLine":5,"endColumn":16},{"ruleId":"171","severity":1,"message":"172","line":67,"column":7,"nodeType":"173","endLine":67,"endColumn":9,"suggestions":"174"},{"ruleId":"175","severity":1,"message":"176","line":184,"column":57,"nodeType":"177","messageId":"178","endLine":184,"endColumn":59},{"ruleId":"175","severity":1,"message":"176","line":184,"column":96,"nodeType":"177","messageId":"178","endLine":184,"endColumn":98},{"ruleId":"171","severity":1,"message":"179","line":48,"column":5,"nodeType":"173","endLine":48,"endColumn":16,"suggestions":"180"},{"ruleId":"167","severity":1,"message":"181","line":1,"column":28,"nodeType":"169","messageId":"170","endLine":1,"endColumn":36},{"ruleId":"171","severity":1,"message":"182","line":17,"column":8,"nodeType":"173","endLine":17,"endColumn":10,"suggestions":"183"},{"ruleId":"171","severity":1,"message":"182","line":22,"column":6,"nodeType":"173","endLine":22,"endColumn":8,"suggestions":"184"},{"ruleId":"167","severity":1,"message":"185","line":5,"column":8,"nodeType":"169","messageId":"170","endLine":5,"endColumn":14},{"ruleId":"167","severity":1,"message":"186","line":6,"column":8,"nodeType":"169","messageId":"170","endLine":6,"endColumn":13},{"ruleId":"167","severity":1,"message":"187","line":12,"column":22,"nodeType":"169","messageId":"170","endLine":12,"endColumn":29},{"ruleId":"167","severity":1,"message":"188","line":12,"column":31,"nodeType":"169","messageId":"170","endLine":12,"endColumn":36},"no-unused-vars","'Register' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'examData'. Either include it or remove the dependency array.","ArrayExpression",["189"],"no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","React Hook useEffect has a missing dependency: 'submitExam'. Either include it or remove the dependency array.",["190"],"'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'exam_id'. Either include them or remove the dependency array.",["191"],["192"],"'Loader' is defined but never used.","'Error' is defined but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.",{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},{"desc":"197","fix":"199"},"Update the dependencies array to be: [examData]",{"range":"200","text":"201"},"Update the dependencies array to be: [completed, submitExam]",{"range":"202","text":"203"},"Update the dependencies array to be: [dispatch, exam_id]",{"range":"204","text":"205"},{"range":"206","text":"205"},[1944,1946],"[examData]",[1674,1685],"[completed, submitExam]",[620,622],"[dispatch, exam_id]",[953,955]]