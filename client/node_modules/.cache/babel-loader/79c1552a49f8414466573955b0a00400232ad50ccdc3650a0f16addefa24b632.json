{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\Mern-Quiz-App\\\\client\\\\src\\\\Components\\\\User\\\\ExaminationPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getAllQuestions, getExamById } from '../../Actions/examAction';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Loader from '../Loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ExaminationPage = () => {\n  _s();\n  var _questions$currentInd, _questions$currentInd2;\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const allQuestions = useSelector(state => state.getAllQuestionsReducer);\n  const {\n    Questions\n  } = allQuestions;\n  const getExam = useSelector(state => state.getExamByIdReducer);\n  const {\n    Allexam\n  } = getExam;\n  const [isExamCompleted, setIsExamCompleted] = useState(false);\n  const [isOn, setIsOn] = useState(false);\n  const [questions, setQuestions] = useState([]);\n  const [answer, setAnswer] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [examTime, setExamTime] = useState(null);\n  const {\n    exam_id\n  } = useParams();\n  const submitExam = async () => {\n    const currentTime = new Date();\n    console.log(currentTime);\n    console.log(answer);\n    const percentage = calculateCorrectPercentage();\n    const resultData = {\n      exam_id: exam_id,\n      answers: answer,\n      percentage: percentage\n    };\n    try {\n      const response = await fetch('/api/result/setResult', {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(resultData)\n      });\n      if (response.ok) {\n        setIsExamCompleted(true);\n      } else {\n        console.error('Failed to submit exam');\n      }\n    } catch (error) {\n      console.error('Error submitting exam:', error);\n    }\n  };\n  useEffect(() => {\n    let timer;\n    if (examTime !== null) {\n      console.log(examTime);\n      const time = examTime;\n      if (!isOn) {\n        const currentTime = new Date();\n        console.log(currentTime);\n        timer = setTimeout(submitExam, examTime * 60000); // Submit exam after specified time\n      } else {\n        timer = setInterval(() => {\n          setCurrentIndex(prevIndex => {\n            if (prevIndex === questions.length - 1) {\n              clearInterval(timer);\n              submitExam(); // Call submitExam when all questions are answered\n            } else {\n              const currentTime = new Date();\n              console.log(currentTime);\n              return (prevIndex + 1) % questions.length;\n            }\n          });\n        }, time * 60000); // Switch to next question every specified time\n      }\n    }\n\n    return () => {\n      clearTimeout(timer);\n      clearInterval(timer);\n    };\n  }, [isOn, questions, examTime]);\n  useEffect(() => {\n    dispatch(getAllQuestions(exam_id));\n    dispatch(getExamById(exam_id));\n  }, [dispatch, exam_id]);\n  useEffect(() => {\n    if (Allexam && Questions) {\n      setIsOn(Allexam.exam_type);\n      setQuestions(Questions[0].questions);\n      setAnswer(new Array(Questions[0].questions.length).fill(null));\n      setExamTime(Allexam.exam_time);\n    }\n  }, [Allexam, Questions]);\n  const handleOptionSelect = (index, optionIndex) => {\n    console.log(index, optionIndex);\n    setAnswer(prevAnswer => {\n      const updatedAnswer = [...prevAnswer];\n      updatedAnswer[index] = optionIndex;\n      return updatedAnswer;\n    });\n  };\n  const calculateCorrectPercentage = () => {\n    const totalQuestions = questions.length;\n    const correctAnswers = answer.filter((answer, index) => answer === questions[index].answer).length;\n    const percentage = correctAnswers / totalQuestions * 100;\n    return percentage.toFixed(2);\n  };\n  const handleGoBack = () => {\n    navigate('/home');\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: Questions === null ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this) : isExamCompleted ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Exam is completed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Result: \", calculateCorrectPercentage(), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGoBack,\n        children: \"Go back to homepage\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this) : !isOn ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: question === null || question === void 0 ? void 0 : question.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 15\n        }, this), question === null || question === void 0 ? void 0 : question.options.map((option, optionIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: `option-${index}`,\n              value: optionIndex,\n              checked: answer[index] === optionIndex,\n              onChange: () => handleOptionSelect(index, optionIndex)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 21\n            }, this), option]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 19\n          }, this)]\n        }, optionIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 17\n        }, this))]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: (_questions$currentInd = questions[currentIndex]) === null || _questions$currentInd === void 0 ? void 0 : _questions$currentInd.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this), (_questions$currentInd2 = questions[currentIndex]) === null || _questions$currentInd2 === void 0 ? void 0 : _questions$currentInd2.options.map((option, optionIndex) => /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: `question-${currentIndex}`,\n          value: optionIndex,\n          checked: answer[currentIndex] === optionIndex,\n          onChange: () => handleOptionSelect(currentIndex, optionIndex)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 15\n        }, this), option]\n      }, optionIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(ExaminationPage, \"Do27UEhVVZdf/H9MHpj15jWaY4I=\", false, function () {\n  return [useDispatch, useNavigate, useSelector, useSelector, useParams];\n});\n_c = ExaminationPage;\nexport default ExaminationPage;\nvar _c;\n$RefreshReg$(_c, \"ExaminationPage\");","map":{"version":3,"names":["React","useState","useEffect","useSelector","useDispatch","getAllQuestions","getExamById","useParams","useNavigate","Loader","jsxDEV","_jsxDEV","Fragment","_Fragment","ExaminationPage","_s","_questions$currentInd","_questions$currentInd2","dispatch","navigate","allQuestions","state","getAllQuestionsReducer","Questions","getExam","getExamByIdReducer","Allexam","isExamCompleted","setIsExamCompleted","isOn","setIsOn","questions","setQuestions","answer","setAnswer","currentIndex","setCurrentIndex","examTime","setExamTime","exam_id","submitExam","currentTime","Date","console","log","percentage","calculateCorrectPercentage","resultData","answers","response","fetch","method","headers","body","JSON","stringify","ok","error","timer","time","setTimeout","setInterval","prevIndex","length","clearInterval","clearTimeout","exam_type","Array","fill","exam_time","handleOptionSelect","index","optionIndex","prevAnswer","updatedAnswer","totalQuestions","correctAnswers","filter","toFixed","handleGoBack","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","question","title","options","option","type","name","value","checked","onChange","_c","$RefreshReg$"],"sources":["E:/project/Mern-Quiz-App/client/src/Components/User/ExaminationPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'; \r\nimport { getAllQuestions, getExamById } from '../../Actions/examAction';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport Loader from '../Loader';\r\n\r\nconst ExaminationPage = () => {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const allQuestions = useSelector((state) => state.getAllQuestionsReducer);\r\n  const { Questions } = allQuestions;\r\n  const getExam = useSelector((state) => state.getExamByIdReducer);\r\n  const { Allexam } = getExam;\r\n\r\n  const [isExamCompleted, setIsExamCompleted] = useState(false);\r\n  const [isOn, setIsOn] = useState(false);\r\n  const [questions, setQuestions] = useState([]);\r\n  const [answer, setAnswer] = useState([]);\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [examTime, setExamTime] = useState(null);\r\n  const { exam_id } = useParams();\r\n\r\n  const submitExam = async () => {\r\n    const currentTime = new Date();\r\n    console.log(currentTime);\r\n    console.log(answer);\r\n    const percentage = calculateCorrectPercentage();\r\n    const resultData = {\r\n      exam_id: exam_id,\r\n      answers: answer,\r\n      percentage: percentage\r\n    };\r\n    try {\r\n      const response = await fetch('/api/result/setResult', {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(resultData)\r\n      });\r\n      if (response.ok) {\r\n        setIsExamCompleted(true);\r\n      } else {\r\n        console.error('Failed to submit exam');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error submitting exam:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let timer;\r\n    if (examTime !== null) {\r\n      console.log(examTime);\r\n      const time = examTime;\r\n      if (!isOn) {\r\n        const currentTime = new Date();\r\n        console.log(currentTime);\r\n        timer = setTimeout(submitExam, examTime * 60000); // Submit exam after specified time\r\n      } else {\r\n        timer = setInterval(() => {\r\n          setCurrentIndex((prevIndex) => {\r\n            if (prevIndex === questions.length - 1) {\r\n              clearInterval(timer);\r\n              submitExam(); // Call submitExam when all questions are answered\r\n            } else {\r\n              const currentTime = new Date();\r\n              console.log(currentTime);\r\n              return (prevIndex + 1) % questions.length;\r\n            }\r\n          });\r\n        }, time * 60000); // Switch to next question every specified time\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      clearTimeout(timer);\r\n      clearInterval(timer);\r\n    };\r\n  }, [isOn, questions, examTime]);\r\n\r\n  useEffect(() => {\r\n    dispatch(getAllQuestions(exam_id));\r\n    dispatch(getExamById(exam_id));\r\n  }, [dispatch, exam_id]);\r\n\r\n  useEffect(() => {\r\n    if (Allexam && Questions) {\r\n      setIsOn(Allexam.exam_type);\r\n      setQuestions(Questions[0].questions);\r\n      setAnswer(new Array(Questions[0].questions.length).fill(null));\r\n      setExamTime(Allexam.exam_time);\r\n    }\r\n  }, [Allexam, Questions]);\r\n\r\n  const handleOptionSelect = (index, optionIndex) => {\r\n    console.log(index, optionIndex);\r\n    setAnswer((prevAnswer) => {\r\n      const updatedAnswer = [...prevAnswer];\r\n      updatedAnswer[index] = optionIndex;\r\n      return updatedAnswer;\r\n    });\r\n  };\r\n\r\n  const calculateCorrectPercentage = () => {\r\n    const totalQuestions = questions.length;\r\n    const correctAnswers = answer.filter(\r\n      (answer, index) => answer === questions[index].answer\r\n    ).length;\r\n    const percentage = (correctAnswers / totalQuestions) * 100;\r\n    return percentage.toFixed(2);\r\n  };\r\n\r\n  const handleGoBack = () => {\r\n    navigate('/home');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {Questions === null ? (\r\n        <Loader />\r\n      ) : isExamCompleted ? (\r\n        <div>\r\n          <h3>Exam is completed</h3>\r\n          <h4>Result: {calculateCorrectPercentage()}%</h4>\r\n          <button onClick={handleGoBack}>Go back to homepage</button>\r\n        </div>\r\n      ) : !isOn ? (\r\n        <div>\r\n          {questions.map((question, index) => (\r\n            <div key={index}>\r\n              <h3>{question?.title}</h3>\r\n              {question?.options.map((option, optionIndex) => (\r\n                <div key={optionIndex}>\r\n                  <label>\r\n                    <input\r\n                      type='radio'\r\n                      name={`option-${index}`}\r\n                      value={optionIndex}\r\n                      checked={answer[index] === optionIndex}\r\n                      onChange={() => handleOptionSelect(index, optionIndex)}\r\n                    />\r\n                    {option}\r\n                  </label>\r\n                  <br/>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <h3>{questions[currentIndex]?.title}</h3>\r\n          {questions[currentIndex]?.options.map((option, optionIndex) => (\r\n            <label key={optionIndex}>\r\n              <input\r\n                type=\"radio\"\r\n                name={`question-${currentIndex}`}\r\n                value={optionIndex}\r\n                checked={answer[currentIndex] === optionIndex}\r\n                onChange={() => handleOptionSelect(currentIndex, optionIndex)}\r\n              />\r\n              {option}\r\n            </label>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ExaminationPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,eAAe,EAAEC,WAAW,QAAQ,0BAA0B;AACvE,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,OAAOC,MAAM,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE/B,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAAA,IAAAC,qBAAA,EAAAC,sBAAA;EAC5B,MAAMC,QAAQ,GAAGd,WAAW,CAAC,CAAC;EAC9B,MAAMe,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAC9B,MAAMY,YAAY,GAAGjB,WAAW,CAAEkB,KAAK,IAAKA,KAAK,CAACC,sBAAsB,CAAC;EACzE,MAAM;IAAEC;EAAU,CAAC,GAAGH,YAAY;EAClC,MAAMI,OAAO,GAAGrB,WAAW,CAAEkB,KAAK,IAAKA,KAAK,CAACI,kBAAkB,CAAC;EAChE,MAAM;IAAEC;EAAQ,CAAC,GAAGF,OAAO;EAE3B,MAAM,CAACG,eAAe,EAAEC,kBAAkB,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAAC4B,IAAI,EAAEC,OAAO,CAAC,GAAG7B,QAAQ,CAAC,KAAK,CAAC;EACvC,MAAM,CAAC8B,SAAS,EAAEC,YAAY,CAAC,GAAG/B,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACgC,MAAM,EAAEC,SAAS,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACkC,YAAY,EAAEC,eAAe,CAAC,GAAGnC,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACoC,QAAQ,EAAEC,WAAW,CAAC,GAAGrC,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM;IAAEsC;EAAQ,CAAC,GAAGhC,SAAS,CAAC,CAAC;EAE/B,MAAMiC,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;IAC9BC,OAAO,CAACC,GAAG,CAACH,WAAW,CAAC;IACxBE,OAAO,CAACC,GAAG,CAACX,MAAM,CAAC;IACnB,MAAMY,UAAU,GAAGC,0BAA0B,CAAC,CAAC;IAC/C,MAAMC,UAAU,GAAG;MACjBR,OAAO,EAAEA,OAAO;MAChBS,OAAO,EAAEf,MAAM;MACfY,UAAU,EAAEA;IACd,CAAC;IACD,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,uBAAuB,EAAE;QACpDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,UAAU;MACjC,CAAC,CAAC;MACF,IAAIE,QAAQ,CAACO,EAAE,EAAE;QACf5B,kBAAkB,CAAC,IAAI,CAAC;MAC1B,CAAC,MAAM;QACLe,OAAO,CAACc,KAAK,CAAC,uBAAuB,CAAC;MACxC;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdd,OAAO,CAACc,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;EAEDvD,SAAS,CAAC,MAAM;IACd,IAAIwD,KAAK;IACT,IAAIrB,QAAQ,KAAK,IAAI,EAAE;MACrBM,OAAO,CAACC,GAAG,CAACP,QAAQ,CAAC;MACrB,MAAMsB,IAAI,GAAGtB,QAAQ;MACrB,IAAI,CAACR,IAAI,EAAE;QACT,MAAMY,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;QAC9BC,OAAO,CAACC,GAAG,CAACH,WAAW,CAAC;QACxBiB,KAAK,GAAGE,UAAU,CAACpB,UAAU,EAAEH,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC;MACpD,CAAC,MAAM;QACLqB,KAAK,GAAGG,WAAW,CAAC,MAAM;UACxBzB,eAAe,CAAE0B,SAAS,IAAK;YAC7B,IAAIA,SAAS,KAAK/B,SAAS,CAACgC,MAAM,GAAG,CAAC,EAAE;cACtCC,aAAa,CAACN,KAAK,CAAC;cACpBlB,UAAU,CAAC,CAAC,CAAC,CAAC;YAChB,CAAC,MAAM;cACL,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;cAC9BC,OAAO,CAACC,GAAG,CAACH,WAAW,CAAC;cACxB,OAAO,CAACqB,SAAS,GAAG,CAAC,IAAI/B,SAAS,CAACgC,MAAM;YAC3C;UACF,CAAC,CAAC;QACJ,CAAC,EAAEJ,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC;MACpB;IACF;;IAEA,OAAO,MAAM;MACXM,YAAY,CAACP,KAAK,CAAC;MACnBM,aAAa,CAACN,KAAK,CAAC;IACtB,CAAC;EACH,CAAC,EAAE,CAAC7B,IAAI,EAAEE,SAAS,EAAEM,QAAQ,CAAC,CAAC;EAE/BnC,SAAS,CAAC,MAAM;IACdgB,QAAQ,CAACb,eAAe,CAACkC,OAAO,CAAC,CAAC;IAClCrB,QAAQ,CAACZ,WAAW,CAACiC,OAAO,CAAC,CAAC;EAChC,CAAC,EAAE,CAACrB,QAAQ,EAAEqB,OAAO,CAAC,CAAC;EAEvBrC,SAAS,CAAC,MAAM;IACd,IAAIwB,OAAO,IAAIH,SAAS,EAAE;MACxBO,OAAO,CAACJ,OAAO,CAACwC,SAAS,CAAC;MAC1BlC,YAAY,CAACT,SAAS,CAAC,CAAC,CAAC,CAACQ,SAAS,CAAC;MACpCG,SAAS,CAAC,IAAIiC,KAAK,CAAC5C,SAAS,CAAC,CAAC,CAAC,CAACQ,SAAS,CAACgC,MAAM,CAAC,CAACK,IAAI,CAAC,IAAI,CAAC,CAAC;MAC9D9B,WAAW,CAACZ,OAAO,CAAC2C,SAAS,CAAC;IAChC;EACF,CAAC,EAAE,CAAC3C,OAAO,EAAEH,SAAS,CAAC,CAAC;EAExB,MAAM+C,kBAAkB,GAAGA,CAACC,KAAK,EAAEC,WAAW,KAAK;IACjD7B,OAAO,CAACC,GAAG,CAAC2B,KAAK,EAAEC,WAAW,CAAC;IAC/BtC,SAAS,CAAEuC,UAAU,IAAK;MACxB,MAAMC,aAAa,GAAG,CAAC,GAAGD,UAAU,CAAC;MACrCC,aAAa,CAACH,KAAK,CAAC,GAAGC,WAAW;MAClC,OAAOE,aAAa;IACtB,CAAC,CAAC;EACJ,CAAC;EAED,MAAM5B,0BAA0B,GAAGA,CAAA,KAAM;IACvC,MAAM6B,cAAc,GAAG5C,SAAS,CAACgC,MAAM;IACvC,MAAMa,cAAc,GAAG3C,MAAM,CAAC4C,MAAM,CAClC,CAAC5C,MAAM,EAAEsC,KAAK,KAAKtC,MAAM,KAAKF,SAAS,CAACwC,KAAK,CAAC,CAACtC,MACjD,CAAC,CAAC8B,MAAM;IACR,MAAMlB,UAAU,GAAI+B,cAAc,GAAGD,cAAc,GAAI,GAAG;IAC1D,OAAO9B,UAAU,CAACiC,OAAO,CAAC,CAAC,CAAC;EAC9B,CAAC;EAED,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACzB5D,QAAQ,CAAC,OAAO,CAAC;EACnB,CAAC;EAED,oBACER,OAAA,CAAAE,SAAA;IAAAmE,QAAA,EACGzD,SAAS,KAAK,IAAI,gBACjBZ,OAAA,CAACF,MAAM;MAAAwE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,GACRzD,eAAe,gBACjBhB,OAAA;MAAAqE,QAAA,gBACErE,OAAA;QAAAqE,QAAA,EAAI;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1BzE,OAAA;QAAAqE,QAAA,GAAI,UAAQ,EAAClC,0BAA0B,CAAC,CAAC,EAAC,GAAC;MAAA;QAAAmC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChDzE,OAAA;QAAQ0E,OAAO,EAAEN,YAAa;QAAAC,QAAA,EAAC;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxD,CAAC,GACJ,CAACvD,IAAI,gBACPlB,OAAA;MAAAqE,QAAA,EACGjD,SAAS,CAACuD,GAAG,CAAC,CAACC,QAAQ,EAAEhB,KAAK,kBAC7B5D,OAAA;QAAAqE,QAAA,gBACErE,OAAA;UAAAqE,QAAA,EAAKO,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEC;QAAK;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,EACzBG,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEE,OAAO,CAACH,GAAG,CAAC,CAACI,MAAM,EAAElB,WAAW,kBACzC7D,OAAA;UAAAqE,QAAA,gBACErE,OAAA;YAAAqE,QAAA,gBACErE,OAAA;cACEgF,IAAI,EAAC,OAAO;cACZC,IAAI,EAAG,UAASrB,KAAM,EAAE;cACxBsB,KAAK,EAAErB,WAAY;cACnBsB,OAAO,EAAE7D,MAAM,CAACsC,KAAK,CAAC,KAAKC,WAAY;cACvCuB,QAAQ,EAAEA,CAAA,KAAMzB,kBAAkB,CAACC,KAAK,EAAEC,WAAW;YAAE;cAAAS,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACxD,CAAC,EACDM,MAAM;UAAA;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC,eACRzE,OAAA;YAAAsE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA,GAXGZ,WAAW;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAYhB,CACN,CAAC;MAAA,GAhBMb,KAAK;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAiBV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,gBAENzE,OAAA;MAAAqE,QAAA,gBACErE,OAAA;QAAAqE,QAAA,GAAAhE,qBAAA,GAAKe,SAAS,CAACI,YAAY,CAAC,cAAAnB,qBAAA,uBAAvBA,qBAAA,CAAyBwE;MAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,GAAAnE,sBAAA,GACxCc,SAAS,CAACI,YAAY,CAAC,cAAAlB,sBAAA,uBAAvBA,sBAAA,CAAyBwE,OAAO,CAACH,GAAG,CAAC,CAACI,MAAM,EAAElB,WAAW,kBACxD7D,OAAA;QAAAqE,QAAA,gBACErE,OAAA;UACEgF,IAAI,EAAC,OAAO;UACZC,IAAI,EAAG,YAAWzD,YAAa,EAAE;UACjC0D,KAAK,EAAErB,WAAY;UACnBsB,OAAO,EAAE7D,MAAM,CAACE,YAAY,CAAC,KAAKqC,WAAY;UAC9CuB,QAAQ,EAAEA,CAAA,KAAMzB,kBAAkB,CAACnC,YAAY,EAAEqC,WAAW;QAAE;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/D,CAAC,EACDM,MAAM;MAAA,GARGlB,WAAW;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAShB,CACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EACN,gBACD,CAAC;AAEP,CAAC;AAACrE,EAAA,CAnKID,eAAe;EAAA,QACFV,WAAW,EACXI,WAAW,EACPL,WAAW,EAEhBA,WAAW,EASPI,SAAS;AAAA;AAAAyF,EAAA,GAdzBlF,eAAe;AAqKrB,eAAeA,eAAe;AAAC,IAAAkF,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}