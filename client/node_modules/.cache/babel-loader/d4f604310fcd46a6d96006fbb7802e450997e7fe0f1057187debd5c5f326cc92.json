{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\Mern-Quiz-App\\\\client\\\\src\\\\Components\\\\User\\\\ExaminationPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getAllQuestions, getExamById } from '../../Actions/examAction';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Loader from '../Loader';\nimport \"./../../Css/ExaminationPage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ExaminationPage = () => {\n  _s();\n  var _questions$currentInd, _questions$currentInd2;\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const AllQuestions = useSelector(state => state.getAllQuestionsReducer);\n  const {\n    Questions\n  } = AllQuestions;\n  const getExam = useSelector(state => state.getExamByIdReducer);\n  const {\n    Allexam\n  } = getExam;\n  // console.log(Allexam)\n  const [isExamCompleted, setIsExamCompleted] = useState(false);\n  const [isOn, setIsOn] = useState(false);\n  const [questions, setQuestions] = useState([]);\n  const [answer, setAnswer] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [examTime, setExamTime] = useState(null);\n  const examId = useParams();\n  const [completed, setCompleted] = useState(false);\n  const [remainingTime, setRemainingTime] = useState(null);\n  //  console.log(examId);\n\n  const submitExam = async () => {\n    let currentTime = new Date();\n    console.log(currentTime);\n    console.log(answer);\n    const per = calculateCorrectPercentage();\n    console.log(per);\n    await fetch('/api/result/setResult', {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        exam_id: examId.exam_id,\n        answers: answer,\n        percentage: per\n      })\n    });\n    setIsExamCompleted(true);\n  };\n  useEffect(() => {\n    if (completed) {\n      submitExam();\n    }\n  }, [completed]);\n  // console.log(answer)\n  useEffect(() => {\n    let timer;\n    if (examTime !== null) {\n      // console.log(examTime)\n      const time = examTime;\n      if (!isOn) {\n        let currentTime = new Date();\n        console.log(currentTime);\n        timer = setTimeout(() => {\n          setCompleted(true);\n        }, examTime * 60000); // Submit exam after specified time\n      } else {\n        timer = setInterval(() => {\n          setCurrentIndex(prevIndex => {\n            if (prevIndex === questions.length - 1) {\n              clearInterval(timer);\n              // submitExam() // Call submitExam when all questions are answered\n              setCompleted(true);\n            } else {\n              let currentTime = new Date();\n              console.log(currentTime);\n              return (prevIndex + 1) % questions.length;\n            }\n          });\n        }, time * 60000); // Switch to next question every specified time\n      }\n      // Update remaining time every second\n      const endTime = new Date().getTime() + examTime * 60000;\n      timer = setInterval(() => {\n        const remaining = Math.max(0, Math.floor((endTime - new Date().getTime()) / 1000));\n        setRemainingTime(remaining);\n      }, 1000);\n    }\n    return () => {\n      clearTimeout(timer);\n      clearInterval(timer);\n    };\n  }, [isOn, questions, examTime]);\n  useEffect(() => {\n    dispatch(getAllQuestions(examId));\n    dispatch(getExamById(examId));\n  }, [dispatch, examId]);\n  useEffect(() => {\n    if (Allexam && Questions) {\n      setIsOn(Allexam.exam_type);\n      setQuestions(Questions[0].questions);\n      setAnswer(new Array(Questions.length).fill(null));\n      setExamTime(Allexam.exam_time);\n    }\n  }, [Allexam, Questions]);\n\n  //  console.log(questions)\n  //  console.log(isOn)\n\n  //  const handleOptionSelect = (index,optionIndex) => {\n  //   const updatedAnswer  = [...answer];\n  //   updatedAnswer[index] = optionIndex;\n  //   setAnswer(updatedAnswer);\n  //  }\n  const handleOptionSelect = (index, optionIndex) => {\n    // console.log(index,optionIndex);\n    setAnswer(prevAnswer => {\n      //  console.log(prevAnswer)\n      const updatedAnswer = [...prevAnswer];\n      updatedAnswer[index] = optionIndex;\n      // console.log(updatedAnswer)\n      return updatedAnswer;\n    });\n  };\n  const calculateCorrectPercentage = () => {\n    const totalQuestions = questions.length;\n    const correctAnswers = answer.filter((answer, index) => answer === questions[index].answer).length;\n    // console.log(correctAnswers);\n    const percentage = correctAnswers / totalQuestions * 100;\n    return percentage.toFixed(2);\n  };\n  const handleGoBack = () => {\n    navigate('/home');\n  };\n\n  // Helper function to format time\n  const formatTime = time => {\n    const hours = Math.floor(time / 3600);\n    const minutes = Math.floor(time % 3600 / 60);\n    const seconds = time % 60;\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"examdiv\",\n      children: Questions == null ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 25\n      }, this) : isExamCompleted ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Exam is completed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Result : \", calculateCorrectPercentage(), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleGoBack,\n          children: \"Go back to homepage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this) : !isOn ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"allquestiondiv\",\n        children: [remainingTime !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Remaining Time: \", formatTime(remainingTime), \" seconds\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 34\n        }, this), questions && questions.map((quesion, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"allq\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [index + 1, \") \", quesion === null || quesion === void 0 ? void 0 : quesion.title]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 11\n          }, this), quesion === null || quesion === void 0 ? void 0 : quesion.options.map((option, optionIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginLeft: \"2rem\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"leb\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                name: `option-${index}`,\n                value: optionIndex,\n                checked: answer[index] === optionIndex,\n                onChange: () => handleOptionSelect(index, optionIndex)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 15\n              }, this), option]\n            }, optionIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 7\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"singlequestiondiv\",\n        children: [remainingTime !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Remaining Time: \", remainingTime, \" seconds\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 34\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [currentIndex + 1, \") \", (_questions$currentInd = questions[currentIndex]) === null || _questions$currentInd === void 0 ? void 0 : _questions$currentInd.title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this), (_questions$currentInd2 = questions[currentIndex]) === null || _questions$currentInd2 === void 0 ? void 0 : _questions$currentInd2.options.map((option, optionIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginLeft: \"2rem\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"lev\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: `question-${currentIndex}`,\n              value: optionIndex,\n              checked: answer[currentIndex] === optionIndex,\n              onChange: () => handleOptionSelect(currentIndex, optionIndex)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 15\n            }, this), option]\n          }, optionIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n_s(ExaminationPage, \"iJ6Hu/XGaoymjMIKxiU6w+jGvGQ=\", false, function () {\n  return [useDispatch, useNavigate, useSelector, useSelector, useParams];\n});\n_c = ExaminationPage;\nexport default ExaminationPage;\nvar _c;\n$RefreshReg$(_c, \"ExaminationPage\");","map":{"version":3,"names":["React","useState","useEffect","useSelector","useDispatch","getAllQuestions","getExamById","useParams","useNavigate","Loader","jsxDEV","_jsxDEV","Fragment","_Fragment","ExaminationPage","_s","_questions$currentInd","_questions$currentInd2","dispatch","navigate","AllQuestions","state","getAllQuestionsReducer","Questions","getExam","getExamByIdReducer","Allexam","isExamCompleted","setIsExamCompleted","isOn","setIsOn","questions","setQuestions","answer","setAnswer","currentIndex","setCurrentIndex","examTime","setExamTime","examId","completed","setCompleted","remainingTime","setRemainingTime","submitExam","currentTime","Date","console","log","per","calculateCorrectPercentage","fetch","method","headers","body","JSON","stringify","exam_id","answers","percentage","timer","time","setTimeout","setInterval","prevIndex","length","clearInterval","endTime","getTime","remaining","Math","max","floor","clearTimeout","exam_type","Array","fill","exam_time","handleOptionSelect","index","optionIndex","prevAnswer","updatedAnswer","totalQuestions","correctAnswers","filter","toFixed","handleGoBack","formatTime","hours","minutes","seconds","toString","padStart","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","quesion","title","options","option","style","marginLeft","type","name","value","checked","onChange","_c","$RefreshReg$"],"sources":["E:/project/Mern-Quiz-App/client/src/Components/User/ExaminationPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useSelector,useDispatch } from 'react-redux'; \r\nimport { getAllQuestions, getExamById } from '../../Actions/examAction';\r\nimport { useParams,useNavigate } from 'react-router-dom';\r\nimport Loader from '../Loader';\r\nimport \"./../../Css/ExaminationPage.css\"\r\n\r\n\r\nconst ExaminationPage = () => {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const AllQuestions = useSelector((state)=>state.getAllQuestionsReducer);\r\n  const {Questions} = AllQuestions;\r\n  const getExam = useSelector((state)=> state.getExamByIdReducer)\r\n  const {Allexam} = getExam;\r\n  // console.log(Allexam)\r\n  const [isExamCompleted, setIsExamCompleted] = useState(false);\r\n  const[isOn,setIsOn] = useState(false);\r\n  const[questions,setQuestions] = useState([]);\r\n  const[answer,setAnswer] = useState([]);\r\n  const[currentIndex,setCurrentIndex] = useState(0);\r\n  const[examTime,setExamTime] = useState(null)\r\n  const examId = useParams();\r\n  const [completed,setCompleted] = useState(false);\r\n  const [remainingTime, setRemainingTime] = useState(null);\r\n  //  console.log(examId);\r\n\r\n  const submitExam = async() => {\r\n    let currentTime = new Date();\r\n    console.log(currentTime);\r\n    console.log(answer)\r\n    const per = calculateCorrectPercentage();\r\n    console.log(per)\r\n    await fetch('/api/result/setResult',{\r\n      method:\"POST\",\r\n      headers:{\r\n        \"Content-Type\" : \"application/json\"\r\n      },\r\n      body: JSON.stringify({exam_id:examId.exam_id,answers:answer,percentage: per})\r\n    });\r\n    setIsExamCompleted(true);\r\n  }\r\n\r\n  useEffect(()=>{\r\n    if(completed){\r\n      submitExam();\r\n    }\r\n  },[completed])\r\n// console.log(answer)\r\nuseEffect(() => {\r\n  let timer;\r\n  if (examTime !== null) {\r\n    // console.log(examTime)\r\n    const time = examTime;\r\n    if (!isOn) {\r\n      let currentTime = new Date();\r\n      console.log(currentTime);\r\n      timer = setTimeout(()=>{\r\n        setCompleted(true)\r\n      }, examTime*60000); // Submit exam after specified time\r\n    } else {\r\n      timer = setInterval(() => {\r\n        setCurrentIndex((prevIndex) => {\r\n          if (prevIndex === questions.length - 1) {\r\n            clearInterval(timer);\r\n            // submitExam() // Call submitExam when all questions are answered\r\n            setCompleted(true);\r\n          } else {\r\n            let currentTime = new Date();\r\n            console.log(currentTime);\r\n            return (prevIndex + 1) % questions.length;\r\n          }\r\n        });\r\n      }, time*60000); // Switch to next question every specified time\r\n    }\r\n    // Update remaining time every second\r\n    const endTime = new Date().getTime() + examTime * 60000;\r\n    timer = setInterval(() => {\r\n      const remaining = Math.max(0, Math.floor((endTime - new Date().getTime()) / 1000));\r\n      setRemainingTime(remaining);\r\n    }, 1000);\r\n    \r\n  }\r\n  \r\n\r\n  return () => {\r\n    clearTimeout(timer);\r\n    clearInterval(timer);\r\n  };\r\n}, [isOn, questions, examTime]);\r\n\r\n\r\n  \r\n\r\n  useEffect(()=>{\r\n    dispatch(getAllQuestions(examId))\r\n    dispatch(getExamById(examId))\r\n  },[dispatch,examId])\r\n\r\n  useEffect(()=>{\r\n    if(Allexam && Questions){\r\n      setIsOn(Allexam.exam_type)\r\n      setQuestions(Questions[0].questions);\r\n      setAnswer(new Array(Questions.length).fill(null));\r\n      setExamTime(Allexam.exam_time)\r\n    }\r\n  },[Allexam,Questions]);\r\n\r\n  //  console.log(questions)\r\n  //  console.log(isOn)\r\n\r\n  //  const handleOptionSelect = (index,optionIndex) => {\r\n  //   const updatedAnswer  = [...answer];\r\n  //   updatedAnswer[index] = optionIndex;\r\n  //   setAnswer(updatedAnswer);\r\n  //  }\r\n   const handleOptionSelect = (index, optionIndex) => {\r\n    // console.log(index,optionIndex);\r\n    setAnswer((prevAnswer) => {\r\n      //  console.log(prevAnswer)\r\n      const updatedAnswer = [...prevAnswer];\r\n      updatedAnswer[index] = optionIndex;\r\n        // console.log(updatedAnswer)\r\n      return updatedAnswer;\r\n    });\r\n  };\r\n\r\n\r\n\r\n   const calculateCorrectPercentage = () => {\r\n    const totalQuestions = questions.length;\r\n    const correctAnswers = answer.filter(\r\n      (answer, index) => answer === questions[index].answer\r\n    ).length;\r\n    // console.log(correctAnswers);\r\n    const percentage = (correctAnswers / totalQuestions) * 100;\r\n    return percentage.toFixed(2);\r\n  };\r\n\r\n   const handleGoBack = () => {\r\n    navigate('/home')\r\n  };\r\n\r\n   // Helper function to format time\r\n   const formatTime = (time) => {\r\n    const hours = Math.floor(time / 3600);\r\n    const minutes = Math.floor((time % 3600) / 60);\r\n    const seconds = time % 60;\r\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(\r\n      2,\r\n      '0'\r\n    )}`;\r\n  };\r\n\r\n  return (\r\n   <>\r\n    <div className='examdiv'>\r\n    { \r\n    Questions == null ? <Loader/> :\r\n    isExamCompleted ? (\r\n        <div>\r\n          <h3>Exam is completed</h3>\r\n          <h4>Result : {calculateCorrectPercentage()}%</h4>\r\n          <button onClick={handleGoBack}>Go back to homepage</button>\r\n        </div>\r\n      ) \r\n      :\r\n    !isOn ? (\r\n      <div className='allquestiondiv'>\r\n      {/* Display remaining time in allquestiondiv */}\r\n      {remainingTime !== null && <div>Remaining Time: {formatTime(remainingTime)} seconds</div>}\r\n         {questions && questions.map((quesion,index)=>(\r\n          <div className='allq'>\r\n          <h3>{index+1}) {quesion?.title}</h3>\r\n          {quesion?.options.map((option,optionIndex)=>(\r\n            <div style={{marginLeft:\"2rem\"}}>\r\n            <label key={optionIndex} className='leb'>\r\n              <input\r\n                type='radio'\r\n                name={`option-${index}`}\r\n                value={optionIndex}\r\n                checked={answer[index] === optionIndex}\r\n                onChange={() => handleOptionSelect(index,optionIndex)}\r\n              />\r\n              {option}\r\n            </label><br/>\r\n            </div>\r\n          ))}\r\n          </div>\r\n          \r\n        ))}\r\n        {/* <input type='submit' onClick={submitExam}/> */}\r\n        </div>\r\n    ) : (\r\n      <div className='singlequestiondiv'>\r\n      {remainingTime !== null && <div>Remaining Time: {remainingTime} seconds</div>}\r\n          <h3>{currentIndex+1}) {questions[currentIndex]?.title}</h3>\r\n          {questions[currentIndex]?.options.map((option, optionIndex) => (\r\n            <div style={{marginLeft:\"2rem\"}}>\r\n            <label className='lev' key={optionIndex}>\r\n              <input\r\n                type=\"radio\"\r\n                name={`question-${currentIndex}`}\r\n                value={optionIndex}\r\n                checked={answer[currentIndex] === optionIndex}\r\n                onChange={() => handleOptionSelect(currentIndex,optionIndex)}\r\n              />\r\n              {option}\r\n            </label><br/>\r\n            </div>\r\n          ))}\r\n        </div>\r\n    )\r\n   }\r\n    </div>   \r\n   </>\r\n  );\r\n};\r\n\r\nexport default ExaminationPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}