{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\Mern-Quiz-App\\\\client\\\\src\\\\Components\\\\User\\\\ExaminationPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getAllQuestions, getExamById } from '../../Actions/examAction';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExaminationPage = () => {\n  _s();\n  const [isOn, setIsOn] = useState(false);\n  const [fetchQuestions, setFetchQuestions] = useState(false);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [questions, setQuestions] = useState([]);\n  const [showResult, setShowResult] = useState(false);\n  const [exam_id, setExamId] = useState(null);\n  const dispatch = useDispatch();\n  const allQuestions = useSelector(state => state.getAllQuestionsReducer);\n  const Questions = allQuestions.Questions[0].questions;\n  const getExam = useSelector(state => state.getExamByIdReducer);\n  const {\n    Allexam\n  } = getExam;\n  const ExamId = useParams();\n  useEffect(() => {\n    setExamId(ExamId);\n  }, [ExamId]);\n  // console.log(ExamId)\n  // console.log(Allexam)\n  //   useEffect(() => {\n  //     // Fetch isOn value from the database or any other data source\n  //     // and set the initial value of isOn accordingly\n  //     const isOnValue = // Fetch isOn value from the database\n  //     setIsOn(isOnValue);\n  //   }, []);\n\n  useEffect(() => {\n    if (!isOn) {\n      const timer = setTimeout(() => {\n        setFetchQuestions(true);\n      }, 10000); // Fetch questions after 10 seconds (10000 milliseconds)\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }\n  }, [isOn]);\n  useEffect(() => {\n    if (fetchQuestions) {\n      const timer = setInterval(() => {\n        setCurrentIndex(prevIndex => (prevIndex + 1) % questions.length);\n      }, 10000); // 10 seconds (10 * 1000 milliseconds)\n\n      return () => {\n        clearInterval(timer);\n      };\n    } else {\n      const timer = setTimeout(() => {\n        setShowResult(true);\n      }, 300000); // Submit form after 5 minutes (5 * 60 * 1000 milliseconds)\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }\n  }, [fetchQuestions, questions]);\n  const handleOptionSelect = optionIndex => {\n    const updatedAnswers = [...answers];\n    updatedAnswers[currentIndex] = optionIndex;\n    setAnswers(updatedAnswers);\n  };\n  const handleSubmit = () => {\n    setShowResult(true);\n  };\n  const calculateCorrectPercentage = () => {\n    const totalQuestions = questions.length;\n    const correctAnswers = answers.filter((answer, index) => answer === questions[index].answer).length;\n    const percentage = correctAnswers / totalQuestions * 100;\n    return percentage.toFixed(2);\n  };\n\n  // if(Questions && exam){\n  //   setQuestions(Questions);\n  //   setAnswers(new Array(Questions.length).fill(null));\n  //   setIsOn(exam.exam_type)\n  // }\n  useEffect(() => {\n    if (allQuestions && Allexam) {\n      setQuestions(Questions);\n      setAnswers(new Array(Questions.length).fill(null));\n      setIsOn(Allexam.exam_type);\n    }\n  }, [allQuestions, Allexam]);\n  useEffect(() => {\n    if (fetchQuestions) {\n      dispatch(getAllQuestions(exam_id));\n    }\n  }, [fetchQuestions, exam_id]);\n  useEffect(() => {\n    if (fetchQuestions) {\n      dispatch(getExamById(exam_id));\n    }\n  }, [exam_id, fetchQuestions, dispatch]);\n  console.log(questions[currentIndex].options);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [fetchQuestions && questions.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [console.log(fetchQuestions), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: questions[currentIndex].title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this), questions[currentIndex].options.map((option, optionIndex) => /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: `question-${currentIndex}`,\n          value: optionIndex,\n          checked: answers[currentIndex] === optionIndex,\n          onChange: () => handleOptionSelect(optionIndex)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 15\n        }, this), option]\n      }, optionIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this) : null, showResult && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Result:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Correct Percentage: \", calculateCorrectPercentage(), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this), !isOn && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s(ExaminationPage, \"veMSnKbU/ztXu3hRt1lFFSQ1Y+w=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useParams];\n});\n_c = ExaminationPage;\nexport default ExaminationPage;\nvar _c;\n$RefreshReg$(_c, \"ExaminationPage\");","map":{"version":3,"names":["React","useState","useEffect","useSelector","useDispatch","getAllQuestions","getExamById","useParams","jsxDEV","_jsxDEV","ExaminationPage","_s","isOn","setIsOn","fetchQuestions","setFetchQuestions","currentIndex","setCurrentIndex","answers","setAnswers","questions","setQuestions","showResult","setShowResult","exam_id","setExamId","dispatch","allQuestions","state","getAllQuestionsReducer","Questions","getExam","getExamByIdReducer","Allexam","ExamId","timer","setTimeout","clearTimeout","setInterval","prevIndex","length","clearInterval","handleOptionSelect","optionIndex","updatedAnswers","handleSubmit","calculateCorrectPercentage","totalQuestions","correctAnswers","filter","answer","index","percentage","toFixed","Array","fill","exam_type","console","log","options","children","title","fileName","_jsxFileName","lineNumber","columnNumber","map","option","type","name","value","checked","onChange","onClick","_c","$RefreshReg$"],"sources":["E:/project/Mern-Quiz-App/client/src/Components/User/ExaminationPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useSelector,useDispatch } from 'react-redux'; \r\nimport { getAllQuestions, getExamById } from '../../Actions/examAction';\r\nimport { useParams } from 'react-router-dom';\r\n\r\n\r\n\r\nconst ExaminationPage = () => {\r\n  const [isOn, setIsOn] = useState(false);\r\n  const [fetchQuestions, setFetchQuestions] = useState(false);\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [answers, setAnswers] = useState([]);\r\n  const [questions, setQuestions] = useState([]);\r\n  const [showResult, setShowResult] = useState(false);\r\n  const [exam_id,setExamId] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const allQuestions = useSelector((state)=>state.getAllQuestionsReducer);\r\n  const Questions = allQuestions.Questions[0].questions; \r\n  const getExam = useSelector((state)=>state.getExamByIdReducer)\r\n  const {Allexam} = getExam;\r\n  \r\n  const ExamId = useParams();\r\n\r\n  useEffect(() => {\r\n    setExamId(ExamId);\r\n  }, [ExamId]); \r\n  // console.log(ExamId)\r\n  // console.log(Allexam)\r\n//   useEffect(() => {\r\n//     // Fetch isOn value from the database or any other data source\r\n//     // and set the initial value of isOn accordingly\r\n//     const isOnValue = // Fetch isOn value from the database\r\n//     setIsOn(isOnValue);\r\n//   }, []);\r\n\r\n  useEffect(() => {\r\n    if (!isOn) {\r\n      const timer = setTimeout(() => {\r\n        setFetchQuestions(true);\r\n      }, 10000); // Fetch questions after 10 seconds (10000 milliseconds)\r\n\r\n      return () => {\r\n        clearTimeout(timer);\r\n      };\r\n    }\r\n  }, [isOn]);\r\n\r\n  useEffect(() => {\r\n    if (fetchQuestions) {\r\n      const timer = setInterval(() => {\r\n        setCurrentIndex((prevIndex) => (prevIndex + 1) % questions.length);\r\n      }, 10000); // 10 seconds (10 * 1000 milliseconds)\r\n\r\n      return () => {\r\n        clearInterval(timer);\r\n      };\r\n    } else {\r\n      const timer = setTimeout(() => {\r\n        setShowResult(true);\r\n      }, 300000); // Submit form after 5 minutes (5 * 60 * 1000 milliseconds)\r\n\r\n      return () => {\r\n        clearTimeout(timer);\r\n      };\r\n    }\r\n  }, [fetchQuestions, questions]);\r\n\r\n  const handleOptionSelect = (optionIndex) => {\r\n    const updatedAnswers = [...answers];\r\n    updatedAnswers[currentIndex] = optionIndex;\r\n    setAnswers(updatedAnswers);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    setShowResult(true);\r\n  };\r\n\r\n  const calculateCorrectPercentage = () => {\r\n    const totalQuestions = questions.length;\r\n    const correctAnswers = answers.filter(\r\n      (answer, index) => answer === questions[index].answer\r\n    ).length;\r\n    const percentage = (correctAnswers / totalQuestions) * 100;\r\n    return percentage.toFixed(2);\r\n  };\r\n\r\n  // if(Questions && exam){\r\n  //   setQuestions(Questions);\r\n  //   setAnswers(new Array(Questions.length).fill(null));\r\n  //   setIsOn(exam.exam_type)\r\n  // }\r\n  useEffect(() => {\r\n    if (allQuestions && Allexam) {\r\n      setQuestions(Questions);\r\n      setAnswers(new Array(Questions.length).fill(null));\r\n      setIsOn(Allexam.exam_type);\r\n    }\r\n  }, [allQuestions,Allexam]);\r\n  \r\n\r\n  useEffect(() => {\r\n    if (fetchQuestions) {\r\n      dispatch(getAllQuestions(exam_id));\r\n    }\r\n  }, [fetchQuestions,exam_id]);\r\n  \r\n  useEffect(() => {\r\n    if (fetchQuestions) {\r\n      dispatch(getExamById(exam_id));\r\n    }\r\n  }, [exam_id,fetchQuestions,dispatch]);\r\n\r\n\r\n  \r\n  console.log(questions[currentIndex].options)\r\n  return (\r\n    <div>\r\n      \r\n      {fetchQuestions && questions.length > 0 ? (\r\n        <div>\r\n        {console.log(fetchQuestions)}\r\n          <h3>{questions[currentIndex].title}</h3>\r\n          {questions[currentIndex].options.map((option, optionIndex) => (\r\n            <label key={optionIndex}>\r\n              <input\r\n                type=\"radio\"\r\n                name={`question-${currentIndex}`}\r\n                value={optionIndex}\r\n                checked={answers[currentIndex] === optionIndex}\r\n                onChange={() => handleOptionSelect(optionIndex)}\r\n              />\r\n              {option}\r\n            </label>\r\n          ))}\r\n        </div>\r\n      ) : null}\r\n      {showResult && (\r\n        <div>\r\n          <h3>Result:</h3>\r\n          <p>Correct Percentage: {calculateCorrectPercentage()}%</p>\r\n        </div>\r\n      )}\r\n      {!isOn && (\r\n        <button onClick={handleSubmit}>Submit</button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExaminationPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}