{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\Mern-Quiz-App\\\\client\\\\src\\\\Components\\\\User\\\\ExaminationPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getAllQuestions, getExamById } from '../../Actions/examAction';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Loader from '../Loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ExaminationPage = () => {\n  _s();\n  var _questions$currentInd, _questions$currentInd2;\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const AllQuestions = useSelector(state => state.getAllQuestionsReducer);\n  const {\n    Questions\n  } = AllQuestions;\n  const getExam = useSelector(state => state.getExamByIdReducer);\n  const {\n    Allexam\n  } = getExam;\n  // console.log(Allexam)\n  const [isExamCompleted, setIsExamCompleted] = useState(false);\n  const [isOn, setIsOn] = useState(false);\n  const [questions, setQuestions] = useState([]);\n  const [answer, setAnswer] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const examId = useParams();\n  //  console.log(examId);\n\n  const submitExam = async () => {\n    const per = calculateCorrectPercentage();\n    await fetch('/api/result/setResult', {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        exam_id: examId.exam_id,\n        answers: answer,\n        percentage: per\n      })\n    });\n    setIsExamCompleted(true);\n  };\n  // console.log(answer)\n  useEffect(() => {\n    let timer;\n    if (!isOn) {\n      timer = setTimeout(submitExam, 60000); // Submit exam after 30 seconds (30000 milliseconds)\n    } else {\n      timer = setInterval(() => {\n        setCurrentIndex(prevIndex => {\n          if (prevIndex === questions.length - 1) {\n            clearInterval(timer);\n            submitExam(); // Call submitExam after 10 seconds (10000 milliseconds)\n          } else {\n            return (prevIndex + 1) % questions.length;\n          }\n        });\n      }, 60000); // Switch to next question every 10 seconds (10000 milliseconds)\n    }\n\n    return () => {\n      clearTimeout(timer);\n      clearInterval(timer);\n    };\n  }, [isOn, questions, answer]);\n  useEffect(() => {\n    dispatch(getAllQuestions(examId));\n    dispatch(getExamById(examId));\n  }, [dispatch, examId]);\n  useEffect(() => {\n    if (Allexam && Questions) {\n      setIsOn(Allexam.exam_type);\n      setQuestions(Questions[0].questions);\n      setAnswer(new Array(Questions.length).fill(null));\n    }\n  }, [Allexam, Questions]);\n\n  //  console.log(questions)\n  //  console.log(isOn)\n\n  //  const handleOptionSelect = (index,optionIndex) => {\n  //   const updatedAnswer  = [...answer];\n  //   updatedAnswer[index] = optionIndex;\n  //   setAnswer(updatedAnswer);\n  //  }\n  const handleOptionSelect = (index, optionIndex) => {\n    setAnswer(prevAnswer => {\n      const updatedAnswer = [...prevAnswer];\n      updatedAnswer[index] = optionIndex;\n      return updatedAnswer;\n    });\n  };\n  const calculateCorrectPercentage = () => {\n    const totalQuestions = questions.length;\n    const correctAnswers = answer.filter((answer, index) => answer === questions[index].answer).length;\n    const percentage = correctAnswers / totalQuestions * 100;\n    return percentage.toFixed(2);\n  };\n  const handleGoBack = () => {\n    navigate('/home');\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: Questions == null ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 25\n    }, this) : isExamCompleted ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Exam is completed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Result : \", calculateCorrectPercentage(), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGoBack,\n        children: \"Go back to homepage\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this) : !isOn ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: questions && questions.map((quesion, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: quesion === null || quesion === void 0 ? void 0 : quesion.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), quesion === null || quesion === void 0 ? void 0 : quesion.options.map((option, optionIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: `option-${index}`,\n              value: optionIndex,\n              checked: answer[index] === optionIndex,\n              onChange: () => handleOptionSelect(index, optionIndex)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 15\n            }, this), option]\n          }, optionIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: (_questions$currentInd = questions[currentIndex]) === null || _questions$currentInd === void 0 ? void 0 : _questions$currentInd.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this), (_questions$currentInd2 = questions[currentIndex]) === null || _questions$currentInd2 === void 0 ? void 0 : _questions$currentInd2.options.map((option, optionIndex) => /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: `question-${currentIndex}`,\n          value: optionIndex,\n          checked: answer[currentIndex] === optionIndex,\n          onChange: () => handleOptionSelect(currentIndex, optionIndex)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 15\n        }, this), option]\n      }, optionIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(ExaminationPage, \"a2AcEa2wzqLkMX8P56BYDFQ6chk=\", false, function () {\n  return [useDispatch, useNavigate, useSelector, useSelector, useParams];\n});\n_c = ExaminationPage;\nexport default ExaminationPage;\nvar _c;\n$RefreshReg$(_c, \"ExaminationPage\");","map":{"version":3,"names":["React","useState","useEffect","useSelector","useDispatch","getAllQuestions","getExamById","useParams","useNavigate","Loader","jsxDEV","_jsxDEV","Fragment","_Fragment","ExaminationPage","_s","_questions$currentInd","_questions$currentInd2","dispatch","navigate","AllQuestions","state","getAllQuestionsReducer","Questions","getExam","getExamByIdReducer","Allexam","isExamCompleted","setIsExamCompleted","isOn","setIsOn","questions","setQuestions","answer","setAnswer","currentIndex","setCurrentIndex","examId","submitExam","per","calculateCorrectPercentage","fetch","method","headers","body","JSON","stringify","exam_id","answers","percentage","timer","setTimeout","setInterval","prevIndex","length","clearInterval","clearTimeout","exam_type","Array","fill","handleOptionSelect","index","optionIndex","prevAnswer","updatedAnswer","totalQuestions","correctAnswers","filter","toFixed","handleGoBack","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","quesion","title","options","option","type","name","value","checked","onChange","_c","$RefreshReg$"],"sources":["E:/project/Mern-Quiz-App/client/src/Components/User/ExaminationPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useSelector,useDispatch } from 'react-redux'; \r\nimport { getAllQuestions, getExamById } from '../../Actions/examAction';\r\nimport { useParams,useNavigate } from 'react-router-dom';\r\nimport Loader from '../Loader';\r\n\r\n\r\n\r\nconst ExaminationPage = () => {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const AllQuestions = useSelector((state)=>state.getAllQuestionsReducer);\r\n  const {Questions} = AllQuestions;\r\n  const getExam = useSelector((state)=> state.getExamByIdReducer)\r\n  const {Allexam} = getExam;\r\n  // console.log(Allexam)\r\n  const [isExamCompleted, setIsExamCompleted] = useState(false);\r\n  const[isOn,setIsOn] = useState(false);\r\n  const[questions,setQuestions] = useState([]);\r\n  const[answer,setAnswer] = useState([]);\r\n  const[currentIndex,setCurrentIndex] = useState(0);\r\n  const examId = useParams();\r\n  //  console.log(examId);\r\n\r\n\r\n  const submitExam = async() => {\r\n    const per = calculateCorrectPercentage();\r\n    await fetch('/api/result/setResult',{\r\n      method:\"POST\",\r\n      headers:{\r\n        \"Content-Type\" : \"application/json\"\r\n      },\r\n      body: JSON.stringify({exam_id:examId.exam_id,answers:answer,percentage: per})\r\n    });\r\n    setIsExamCompleted(true);\r\n  }\r\n// console.log(answer)\r\n  useEffect(() => {\r\n    let timer;\r\n    if (!isOn) {\r\n      timer = setTimeout(submitExam, 60000); // Submit exam after 30 seconds (30000 milliseconds)\r\n    } else {\r\n      timer = setInterval(() => {\r\n        setCurrentIndex((prevIndex) => {\r\n          if (prevIndex === questions.length - 1) {\r\n            clearInterval(timer);\r\n            submitExam() // Call submitExam after 10 seconds (10000 milliseconds)\r\n          }else{\r\n            return(prevIndex + 1) % questions.length\r\n          }\r\n        \r\n      });\r\n      }, 60000); // Switch to next question every 10 seconds (10000 milliseconds)\r\n    }\r\n\r\n    return () => {\r\n      clearTimeout(timer);\r\n      clearInterval(timer);\r\n    };\r\n  }, [isOn, questions,answer]);\r\n\r\n  \r\n\r\n  useEffect(()=>{\r\n    dispatch(getAllQuestions(examId))\r\n    dispatch(getExamById(examId))\r\n  },[dispatch,examId])\r\n\r\n  useEffect(()=>{\r\n    if(Allexam && Questions){\r\n      setIsOn(Allexam.exam_type)\r\n      setQuestions(Questions[0].questions);\r\n      setAnswer(new Array(Questions.length).fill(null));\r\n    }\r\n  },[Allexam,Questions]);\r\n\r\n  //  console.log(questions)\r\n  //  console.log(isOn)\r\n\r\n  //  const handleOptionSelect = (index,optionIndex) => {\r\n  //   const updatedAnswer  = [...answer];\r\n  //   updatedAnswer[index] = optionIndex;\r\n  //   setAnswer(updatedAnswer);\r\n  //  }\r\n   const handleOptionSelect = (index, optionIndex) => {\r\n    setAnswer((prevAnswer) => {\r\n      const updatedAnswer = [...prevAnswer];\r\n      updatedAnswer[index] = optionIndex;\r\n      return updatedAnswer;\r\n    });\r\n  };\r\n\r\n\r\n\r\n   const calculateCorrectPercentage = () => {\r\n    const totalQuestions = questions.length;\r\n    const correctAnswers = answer.filter(\r\n      (answer, index) => answer === questions[index].answer\r\n    ).length;\r\n    const percentage = (correctAnswers / totalQuestions) * 100;\r\n    return percentage.toFixed(2);\r\n  };\r\n\r\n   const handleGoBack = () => {\r\n    navigate('/home')\r\n  };\r\n\r\n  return (\r\n   <>\r\n   { \r\n    Questions == null ? <Loader/> :\r\n    isExamCompleted ? (\r\n        <div>\r\n          <h3>Exam is completed</h3>\r\n          <h4>Result : {calculateCorrectPercentage()}%</h4>\r\n          <button onClick={handleGoBack}>Go back to homepage</button>\r\n        </div>\r\n      ) \r\n      :\r\n    !isOn ? (\r\n      <div>\r\n         {questions && questions.map((quesion,index)=>(\r\n          <div>\r\n          <h3>{quesion?.title}</h3>\r\n          {quesion?.options.map((option,optionIndex)=>(\r\n            <div>\r\n            <label key={optionIndex}>\r\n              <input\r\n                type='radio'\r\n                name={`option-${index}`}\r\n                value={optionIndex}\r\n                checked={answer[index] === optionIndex}\r\n                onChange={() => handleOptionSelect(index,optionIndex)}\r\n              />\r\n              {option}\r\n            </label><br/>\r\n            </div>\r\n          ))}\r\n          </div>\r\n          \r\n        ))}\r\n        {/* <input type='submit' onClick={submitExam}/> */}\r\n        </div>\r\n    ) : (\r\n      <div>\r\n          <h3>{questions[currentIndex]?.title}</h3>\r\n          {questions[currentIndex]?.options.map((option, optionIndex) => (\r\n            <label key={optionIndex}>\r\n              <input\r\n                type=\"radio\"\r\n                name={`question-${currentIndex}`}\r\n                value={optionIndex}\r\n                checked={answer[currentIndex] === optionIndex}\r\n                onChange={() => handleOptionSelect(currentIndex,optionIndex)}\r\n              />\r\n              {option}\r\n            </label>\r\n          ))}\r\n        </div>\r\n    )\r\n   }\r\n   \r\n   </>\r\n  );\r\n};\r\n\r\nexport default ExaminationPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,EAACC,WAAW,QAAQ,aAAa;AACrD,SAASC,eAAe,EAAEC,WAAW,QAAQ,0BAA0B;AACvE,SAASC,SAAS,EAACC,WAAW,QAAQ,kBAAkB;AACxD,OAAOC,MAAM,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAI/B,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAAA,IAAAC,qBAAA,EAAAC,sBAAA;EAC5B,MAAMC,QAAQ,GAAGd,WAAW,CAAC,CAAC;EAC9B,MAAMe,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAC9B,MAAMY,YAAY,GAAGjB,WAAW,CAAEkB,KAAK,IAAGA,KAAK,CAACC,sBAAsB,CAAC;EACvE,MAAM;IAACC;EAAS,CAAC,GAAGH,YAAY;EAChC,MAAMI,OAAO,GAAGrB,WAAW,CAAEkB,KAAK,IAAIA,KAAK,CAACI,kBAAkB,CAAC;EAC/D,MAAM;IAACC;EAAO,CAAC,GAAGF,OAAO;EACzB;EACA,MAAM,CAACG,eAAe,EAAEC,kBAAkB,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAK,CAAC4B,IAAI,EAACC,OAAO,CAAC,GAAG7B,QAAQ,CAAC,KAAK,CAAC;EACrC,MAAK,CAAC8B,SAAS,EAACC,YAAY,CAAC,GAAG/B,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAK,CAACgC,MAAM,EAACC,SAAS,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAK,CAACkC,YAAY,EAACC,eAAe,CAAC,GAAGnC,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAMoC,MAAM,GAAG9B,SAAS,CAAC,CAAC;EAC1B;;EAGA,MAAM+B,UAAU,GAAG,MAAAA,CAAA,KAAW;IAC5B,MAAMC,GAAG,GAAGC,0BAA0B,CAAC,CAAC;IACxC,MAAMC,KAAK,CAAC,uBAAuB,EAAC;MAClCC,MAAM,EAAC,MAAM;MACbC,OAAO,EAAC;QACN,cAAc,EAAG;MACnB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACC,OAAO,EAACV,MAAM,CAACU,OAAO;QAACC,OAAO,EAACf,MAAM;QAACgB,UAAU,EAAEV;MAAG,CAAC;IAC9E,CAAC,CAAC;IACFX,kBAAkB,CAAC,IAAI,CAAC;EAC1B,CAAC;EACH;EACE1B,SAAS,CAAC,MAAM;IACd,IAAIgD,KAAK;IACT,IAAI,CAACrB,IAAI,EAAE;MACTqB,KAAK,GAAGC,UAAU,CAACb,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC;IACzC,CAAC,MAAM;MACLY,KAAK,GAAGE,WAAW,CAAC,MAAM;QACxBhB,eAAe,CAAEiB,SAAS,IAAK;UAC7B,IAAIA,SAAS,KAAKtB,SAAS,CAACuB,MAAM,GAAG,CAAC,EAAE;YACtCC,aAAa,CAACL,KAAK,CAAC;YACpBZ,UAAU,CAAC,CAAC,EAAC;UACf,CAAC,MAAI;YACH,OAAM,CAACe,SAAS,GAAG,CAAC,IAAItB,SAAS,CAACuB,MAAM;UAC1C;QAEJ,CAAC,CAAC;MACF,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;IACb;;IAEA,OAAO,MAAM;MACXE,YAAY,CAACN,KAAK,CAAC;MACnBK,aAAa,CAACL,KAAK,CAAC;IACtB,CAAC;EACH,CAAC,EAAE,CAACrB,IAAI,EAAEE,SAAS,EAACE,MAAM,CAAC,CAAC;EAI5B/B,SAAS,CAAC,MAAI;IACZgB,QAAQ,CAACb,eAAe,CAACgC,MAAM,CAAC,CAAC;IACjCnB,QAAQ,CAACZ,WAAW,CAAC+B,MAAM,CAAC,CAAC;EAC/B,CAAC,EAAC,CAACnB,QAAQ,EAACmB,MAAM,CAAC,CAAC;EAEpBnC,SAAS,CAAC,MAAI;IACZ,IAAGwB,OAAO,IAAIH,SAAS,EAAC;MACtBO,OAAO,CAACJ,OAAO,CAAC+B,SAAS,CAAC;MAC1BzB,YAAY,CAACT,SAAS,CAAC,CAAC,CAAC,CAACQ,SAAS,CAAC;MACpCG,SAAS,CAAC,IAAIwB,KAAK,CAACnC,SAAS,CAAC+B,MAAM,CAAC,CAACK,IAAI,CAAC,IAAI,CAAC,CAAC;IACnD;EACF,CAAC,EAAC,CAACjC,OAAO,EAACH,SAAS,CAAC,CAAC;;EAEtB;EACA;;EAEA;EACA;EACA;EACA;EACA;EACC,MAAMqC,kBAAkB,GAAGA,CAACC,KAAK,EAAEC,WAAW,KAAK;IAClD5B,SAAS,CAAE6B,UAAU,IAAK;MACxB,MAAMC,aAAa,GAAG,CAAC,GAAGD,UAAU,CAAC;MACrCC,aAAa,CAACH,KAAK,CAAC,GAAGC,WAAW;MAClC,OAAOE,aAAa;IACtB,CAAC,CAAC;EACJ,CAAC;EAIA,MAAMxB,0BAA0B,GAAGA,CAAA,KAAM;IACxC,MAAMyB,cAAc,GAAGlC,SAAS,CAACuB,MAAM;IACvC,MAAMY,cAAc,GAAGjC,MAAM,CAACkC,MAAM,CAClC,CAAClC,MAAM,EAAE4B,KAAK,KAAK5B,MAAM,KAAKF,SAAS,CAAC8B,KAAK,CAAC,CAAC5B,MACjD,CAAC,CAACqB,MAAM;IACR,MAAML,UAAU,GAAIiB,cAAc,GAAGD,cAAc,GAAI,GAAG;IAC1D,OAAOhB,UAAU,CAACmB,OAAO,CAAC,CAAC,CAAC;EAC9B,CAAC;EAEA,MAAMC,YAAY,GAAGA,CAAA,KAAM;IAC1BlD,QAAQ,CAAC,OAAO,CAAC;EACnB,CAAC;EAED,oBACCR,OAAA,CAAAE,SAAA;IAAAyD,QAAA,EAEC/C,SAAS,IAAI,IAAI,gBAAGZ,OAAA,CAACF,MAAM;MAAA8D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,GAC7B/C,eAAe,gBACXhB,OAAA;MAAA2D,QAAA,gBACE3D,OAAA;QAAA2D,QAAA,EAAI;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1B/D,OAAA;QAAA2D,QAAA,GAAI,WAAS,EAAC9B,0BAA0B,CAAC,CAAC,EAAC,GAAC;MAAA;QAAA+B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjD/D,OAAA;QAAQgE,OAAO,EAAEN,YAAa;QAAAC,QAAA,EAAC;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxD,CAAC,GAGV,CAAC7C,IAAI,gBACHlB,OAAA;MAAA2D,QAAA,EACIvC,SAAS,IAAIA,SAAS,CAAC6C,GAAG,CAAC,CAACC,OAAO,EAAChB,KAAK,kBACzClD,OAAA;QAAA2D,QAAA,gBACA3D,OAAA;UAAA2D,QAAA,EAAKO,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEC;QAAK;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,EACxBG,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEE,OAAO,CAACH,GAAG,CAAC,CAACI,MAAM,EAAClB,WAAW,kBACvCnD,OAAA;UAAA2D,QAAA,gBACA3D,OAAA;YAAA2D,QAAA,gBACE3D,OAAA;cACEsE,IAAI,EAAC,OAAO;cACZC,IAAI,EAAG,UAASrB,KAAM,EAAE;cACxBsB,KAAK,EAAErB,WAAY;cACnBsB,OAAO,EAAEnD,MAAM,CAAC4B,KAAK,CAAC,KAAKC,WAAY;cACvCuB,QAAQ,EAAEA,CAAA,KAAMzB,kBAAkB,CAACC,KAAK,EAACC,WAAW;YAAE;cAAAS,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACvD,CAAC,EACDM,MAAM;UAAA,GARGlB,WAAW;YAAAS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAShB,CAAC,eAAA/D,OAAA;YAAA4D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR,CACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAEN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEG,CAAC,gBAER/D,OAAA;MAAA2D,QAAA,gBACI3D,OAAA;QAAA2D,QAAA,GAAAtD,qBAAA,GAAKe,SAAS,CAACI,YAAY,CAAC,cAAAnB,qBAAA,uBAAvBA,qBAAA,CAAyB8D;MAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,GAAAzD,sBAAA,GACxCc,SAAS,CAACI,YAAY,CAAC,cAAAlB,sBAAA,uBAAvBA,sBAAA,CAAyB8D,OAAO,CAACH,GAAG,CAAC,CAACI,MAAM,EAAElB,WAAW,kBACxDnD,OAAA;QAAA2D,QAAA,gBACE3D,OAAA;UACEsE,IAAI,EAAC,OAAO;UACZC,IAAI,EAAG,YAAW/C,YAAa,EAAE;UACjCgD,KAAK,EAAErB,WAAY;UACnBsB,OAAO,EAAEnD,MAAM,CAACE,YAAY,CAAC,KAAK2B,WAAY;UAC9CuB,QAAQ,EAAEA,CAAA,KAAMzB,kBAAkB,CAACzB,YAAY,EAAC2B,WAAW;QAAE;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9D,CAAC,EACDM,MAAM;MAAA,GARGlB,WAAW;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAShB,CACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EACR,gBAGA,CAAC;AAEN,CAAC;AAAC3D,EAAA,CA5JID,eAAe;EAAA,QACFV,WAAW,EACXI,WAAW,EACPL,WAAW,EAEhBA,WAAW,EAQZI,SAAS;AAAA;AAAA+E,EAAA,GAbpBxE,eAAe;AA8JrB,eAAeA,eAAe;AAAC,IAAAwE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}